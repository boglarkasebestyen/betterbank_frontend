{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/myContext/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //from CREATE ACCOUNT COMPONENT\n  const [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\"); // new\n\n  const [userName, setUserName] = useState(\"\");\n  const [loggedInUserName, setLoggedInUserName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstNameError, setFirstNameError] = useState(\"\");\n  const [lastNameError, setLastNameError] = useState(\"\"); // new\n\n  const [userNameError, setUserNameError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [users, setUsers] = useState([]); // old: let nameErrorStr = \"\";\n\n  let firstNameErrorStr = \"\";\n  let lastNameErrorStr = \"\"; // new\n\n  let userNameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const [loginSuccessMessageVisible, setLoginSuccessMessageVisible] = useState(false);\n\n  const validateLogin = () => {\n    setUserNameError(\"\");\n    setPasswError(\"\"); //username\n\n    if (!userName) {\n      userNameErrorStr = \"Oops! Your username can't be blank.\";\n    } else if (userName.length == 1) {\n      userNameErrorStr = \"Username must be longer than that.\";\n    } //password\n\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //username error\n\n\n    if (userNameErrorStr == \"\") {\n      validateUserName(userName);\n    } //password error\n\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setUserNameError(userNameErrorStr);\n    setPasswError(passwordErrorStr);\n    return userNameErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  let showSuccessMessageLogin = () => {\n    if (loginSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Awesome, \", firstName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You are logged in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Get started by using the navigation bar above.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearLogin\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgLogin(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------\n\n\n  const validate = () => {\n    setUserNameError(\"\");\n    setFirstNameError(\"\");\n    setLastNameError(\"\");\n    setEmailError(\"\");\n    setPasswError(\"\"); //username\n\n    if (!userName) {\n      userNameErrorStr = \"Oops! Your username can't be blank.\"; //additional: length \n    } else if (userName.length == 1) {\n      firstNameErrorStr = \"Username must be longer than that.\";\n    } //firstName\n\n\n    if (!firstName) {\n      firstNameErrorStr = \"Oops! Your first name can't be blank.\"; //additional: name length \n    } else if (firstName.length == 1) {\n      firstNameErrorStr = \"First name must be longer than that.\";\n    } //lastName\n\n\n    if (!lastName) {\n      lastNameErrorStr = \"Oops! Your last name can't be blank.\"; //additional: name length \n    } else if (lastName.length < 2) {\n      lastNameErrorStr = \"Last name must be longer than that.\";\n    } //email\n\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    } //password\n\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //validate, if there's no error message \n    //userName\n\n\n    if (userNameErrorStr == \"\") {\n      // alert(\"username\")\n      validateUserName(userName);\n    } //firstName\n\n\n    if (firstNameErrorStr == \"\") {\n      // alert(\"first name\")\n      validateFirstName(firstName);\n    } //lastName\n\n\n    if (lastNameErrorStr == \"\") {\n      // alert(\"last name\")\n      validateLastName(lastName);\n    } //email\n\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    } //password\n\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setUserNameError(userNameErrorStr);\n    setFirstNameError(firstNameErrorStr);\n    setLastNameError(lastNameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr); //changed here from nameErrorStr, guess it's fine?\n\n    return userNameErrorStr === \"\" && firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  }; //-----------------------------------------------\n  //changed it from validaName to validateFirstName\n\n\n  const validateFirstName = newFirstName => {\n    setFirstNameError(\"\"); //additonal: limiting input to the letters of the English alphabet, including capital letters\n\n    if (!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      //this ok?\n      firstNameErrorStr = \"Enter letters only\";\n      setFirstNameError(firstNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateLastName = newLastName => {\n    setLastNameError(\"\"); //additonal: limiting input to a mix of letters and numbers\n\n    if (!newLastName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      lastNameErrorStr = \"Enter letters only\";\n      setLastNameError(lastNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateUserName = newUserName => {\n    setUserNameError(\"\"); //additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\n    if (!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n      userNameErrorStr = \"Only letters, numbers and underscore, and between 3-10 characters in username.\";\n      setUserNameError(userNameErrorStr);\n      return false;\n    }\n\n    return true;\n  }; // clear successful login for OK button\n\n\n  let clearMsgLogin = () => {\n    setLoginSuccessMessageVisible(false);\n  }; // ----------------------------------\n  //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Bad email format.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //---------------\n  //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      setSuccessfullAccountMessageVisible(true); //adding all new users, for \"All Data\"\n\n      let newUser = {\n        \"userName\": userName,\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"email\": email,\n        \"password\": password\n      };\n      setUsers(users => users.concat(newUser));\n    } else {\n      return;\n    }\n  };\n\n  let showSuccessMessageAccount = () => {\n    if (successfullAccountMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Awesome, \", firstName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your account was created.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearForm\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearForm(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 5\n      }, this);\n    }\n\n    return;\n  }; //-----------------\n  //validation on onClick / Login button\n\n\n  const handleClickLogin = e => {\n    if (validateLogin()) {\n      setLoginSuccessMessageVisible(true);\n      clearForm();\n    } else {\n      return;\n    }\n  };\n\n  const handleFirstNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newFirstName = e.currentTarget.value;\n\n    if (!newFirstName || validateFirstName(newFirstName)) {\n      setFirstName(newFirstName);\n    }\n  };\n\n  const handleLastNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newLastName = e.currentTarget.value;\n\n    if (!newLastName || validateLastName(newLastName)) {\n      setLastName(newLastName);\n    }\n  };\n\n  const handleUserNameChange = e => {\n    setUserName(e.currentTarget.value);\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  }; //firing when creating new account\n\n\n  const clearForm = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setUserName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessfullAccountMessageVisible(false);\n  }; // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [balance, setBalance] = useState(0.0);\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [depositError, setDepositError] = useState(\"\");\n  let [depositArr, setDepositArr] = useState([]);\n  const [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false);\n  let depositErrorStr = \"\"; //validating numbers for deposit and withdraw\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Enter numbers only.\"; //this was missing:\n\n      withdrawErrorStr = \"Enter numbers only.\";\n      setDepositError(depositErrorStr); //this was missing:\n\n      setWithdrawError(withdrawErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //input\n\n\n  const depositHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    } // setSuccessMessageVisible(false);  \n\n\n    setDepositSuccessMessageVisible(false);\n  }; //submit + additional validation \n\n\n  const submitDeposit = currentValue => {\n    if (currentValue == 0.0) {\n      depositErrorStr = \"Amount must be higher than 0.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      depositErrorStr = \"Amount must be lower than that.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    } //total amount / balance\n\n\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setDepositSuccessMessageVisible(true);\n    setDepositAmount(0.0); //all new deposits for \"All Data\"\n\n    let newDeposit = {\n      \"depositAmount\": depositAmount\n    };\n    setDepositArr(depositArr => depositArr.concat(newDeposit));\n  }; // clear successful deposit & withdraw message for OK button\n\n\n  let clearMsgDeposit = () => {\n    setDepositSuccessMessageVisible(false); // setDepositAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showSuccessMessageDeposit = () => {\n    if (depositSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearDep\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgDeposit(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 6\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  let [withdrawArr, setWithdrawArr] = useState([]);\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let withdrawErrorStr = \"\"; //input\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue == 0.0) {\n      withdrawErrorStr = \"Amount must be higher than 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      withdrawErrorStr = \"Amount must be lower than that.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n      setWithdrawAmount(0.0); //all withdrawals, for \"All Data\"\n\n      let newWithdraw = {\n        \"withdrawAmount\": withdrawAmount\n      };\n      setWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n    }\n  };\n\n  let clearMsgWithdraw = () => {\n    setWithdrawSuccessMessageVisible(false); // setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your withdrawal was succesful.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearWith\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgWithdraw(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 7\n      }, this);\n    }\n\n    return;\n  }; //authentication\n\n\n  const [error, setError] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  async function authenticateWithAPI() {\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n    const response = await fetch(`${API_URL}/auth/local`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        identifier: \"sebestyenboglarkacsilla@gmail.com\",\n        password: \"SecretPassword666\"\n      })\n    });\n\n    if (response.ok) {\n      const responseObj = await response.json();\n      Cookies.set(\"token\", responseObj.jwt);\n    } else {\n      console.log(response.statusText);\n      setError(response.statusText);\n    }\n  } //export context\n\n\n  const defaultContext = {\n    //state:\n    firstName,\n    lastName,\n    userName,\n    email,\n    password,\n    firstNameError,\n    lastNameError,\n    userNameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    successfullAccountMessageVisible,\n    withdrawSuccessMessageVisible,\n    depositSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    depositArr,\n    withdrawArr,\n    error,\n    result,\n    loggedInUserName,\n    //functions:\n    validate,\n    handleClick,\n    handleClickLogin,\n    handleFirstNameChange,\n    handleLastNameChange,\n    handleUserNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    validateNr,\n    depositHandleChange,\n    submitDeposit,\n    showSuccessMessageDeposit,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showSuccessMessageWithdraw,\n    showSuccessMessageLogin,\n    showSuccessMessageAccount,\n    clearForm,\n    authenticateWithAPI,\n    setError,\n    setResult,\n    setLoggedInUserName\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 579,\n    columnNumber: 4\n  }, this);\n}\n\n_s(MyContextProvider, \"0ONGTxbhvZgeHwTpUwCoBdlbbOQ=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/myContext/MyContext.js"],"names":["React","createContext","useState","Cookies","MyContext","MyContextProvider","children","successfullAccountMessageVisible","setSuccessfullAccountMessageVisible","firstName","setFirstName","lastName","setLastName","userName","setUserName","loggedInUserName","setLoggedInUserName","email","setEmail","password","setPassword","firstNameError","setFirstNameError","lastNameError","setLastNameError","userNameError","setUserNameError","emailError","setEmailError","passwError","setPasswError","users","setUsers","firstNameErrorStr","lastNameErrorStr","userNameErrorStr","emailErrorStr","passwordErrorStr","loginSuccessMessageVisible","setLoginSuccessMessageVisible","validateLogin","length","validateUserName","validatePassword","showSuccessMessageLogin","clearMsgLogin","validate","validateFirstName","validateLastName","validateEmail","newFirstName","match","newLastName","newUserName","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","showSuccessMessageAccount","clearForm","handleClickLogin","handleFirstNameChange","currentTarget","value","handleLastNameChange","handleUserNameChange","handleEmailChange","handlePasswordChange","balance","setBalance","depositAmount","setDepositAmount","depositError","setDepositError","depositArr","setDepositArr","depositSuccessMessageVisible","setDepositSuccessMessageVisible","depositErrorStr","validateNr","newValue","setWithdrawError","withdrawErrorStr","depositHandleChange","target","slice","submitDeposit","currentValue","parseFloat","newDeposit","clearMsgDeposit","showSuccessMessageDeposit","withdrawAmount","setWithdrawAmount","withdrawError","withdrawArr","setWithdrawArr","withdrawSuccessMessageVisible","setWithdrawSuccessMessageVisible","withdrawHandleChange","submitWithdrawal","newWithdraw","clearMsgWithdraw","showSuccessMessageWithdraw","error","setError","result","setResult","authenticateWithAPI","API_URL","process","env","NEXT_PUBLIC_API_URL","response","fetch","method","headers","body","JSON","stringify","identifier","ok","responseObj","json","set","jwt","console","log","statusText","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\nimport Cookies from \"js-cookie\";\nconst MyContext = createContext();\n\nfunction MyContextProvider({children}) {\n\n\t//from CREATE ACCOUNT COMPONENT\n\tconst [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false); \n\tconst [firstName, setFirstName] = useState(\"\");\n\tconst [lastName, setLastName] = useState(\"\");\n\t// new\n\tconst [userName, setUserName] = useState(\"\");\n\tconst [loggedInUserName, setLoggedInUserName] = useState(\"\")\n\n\tconst [email, setEmail] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\n\tconst [firstNameError, setFirstNameError] = useState(\"\");\n\tconst [lastNameError, setLastNameError] = useState(\"\");\n\n\t// new\n\tconst [userNameError, setUserNameError] = useState(\"\");\n\n\tconst [emailError, setEmailError] = useState(\"\");\n\tconst [passwError, setPasswError] = useState(\"\");\n\n\tconst [users, setUsers] = useState([]);\n\n\t// old: let nameErrorStr = \"\";\n\t\tlet firstNameErrorStr = \"\";\n\tlet lastNameErrorStr = \"\";\n\t// new\n\tlet userNameErrorStr = \"\";\n\n\tlet emailErrorStr = \"\";\n\tlet passwordErrorStr = \"\";\n\n\n\t//NO INPUT + ADDITIONAL VALIDATION\n\tconst [loginSuccessMessageVisible, setLoginSuccessMessageVisible] = useState(false); \n\n\tconst validateLogin = () => {\n\t\tsetUserNameError(\"\");\n\t\tsetPasswError(\"\");\n\n\t\t//username\n\t\tif (!userName) {\n\t\t\tuserNameErrorStr = \"Oops! Your username can't be blank.\";\n\t\t\t} else if (userName.length == 1) {\n\t\t\tuserNameErrorStr = \"Username must be longer than that.\";\n\t\t}\n\n\t\t//password\n\t\tif (!password) {\n\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t}\n\n\t\t//username error\n\t\tif (userNameErrorStr == \"\") {\n\t\t\tvalidateUserName(userName);\n\t\t}\n\n\t\t//password error\n\t\tif (passwordErrorStr == \"\") {\n\t\t\tvalidatePassword(password);\n\t\t}\n\n\t\tsetUserNameError(userNameErrorStr);\n\t\tsetPasswError(passwordErrorStr);\n\t\treturn userNameErrorStr === \"\" && passwordErrorStr === \"\";\n\t\t//returns true and validate() is executed\n\n\t};\n\n\tlet showSuccessMessageLogin = () => {\n\t\tif (loginSuccessMessageVisible) {\n\t\t\treturn (\n\t\t\t\t<div className=\"successMessage\">\n\t\t\t\t\t\t<h5>Awesome, {firstName}!</h5>\n\t\t\t\t\t\t<p>You are logged in.</p>\n\t\t\t\t\t\t<p>Get started by using the navigation bar above.</p>\n\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t<button type=\"submit\" id=\"clearLogin\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgLogin()}>Ok</button>             \n\t\t\t\t</div>\n\n\t\t\t)\n\t\t}\n\t\treturn;\n\t};\n\n\n\t// ------------------------------\n\n\t\tconst validate = () => {\n\t\t\tsetUserNameError(\"\");\n\t\t\tsetFirstNameError(\"\");\n\t\t\tsetLastNameError(\"\");\n\t\t\tsetEmailError(\"\");\n\t\t\tsetPasswError(\"\");\n\n\t\t\t//username\n\t\t\tif (!userName) {\n\t\t\t\tuserNameErrorStr = \"Oops! Your username can't be blank.\";\n\t\t\t\t//additional: length \n\t\t\t} else  if (userName.length == 1) {\n\t\t\t\t\tfirstNameErrorStr = \"Username must be longer than that.\";\n\t\t\t} \n\n\t\t\t//firstName\n\t\t\tif (!firstName) {\n\t\t\t\tfirstNameErrorStr = \"Oops! Your first name can't be blank.\";\n\t\t\t\t//additional: name length \n\t\t\t} else  if (firstName.length == 1) {\n\t\t\t\t\tfirstNameErrorStr = \"First name must be longer than that.\";\n\t\t\t} \n\n\t\t\t//lastName\n\t\t\tif (!lastName) {\n\t\t\t\tlastNameErrorStr = \"Oops! Your last name can't be blank.\";\n\t\t\t\t//additional: name length \n\t\t\t} else  if (lastName.length < 2) {\n\t\t\t\tlastNameErrorStr = \"Last name must be longer than that.\";\n\t\t\t} \n\n\t\t\t//email\n\t\t\tif (!email) {\n\t\t\t\t\temailErrorStr = \"Oops! Your email can't be blank.\";\n\t\t\t\t\t//additional: email length \n\t\t\t} else if (email.length == 1) {\n\t\t\t\t\temailErrorStr = \"Email must be longer than that.\";\n\t\t\t}\n\n\t\t\t//password\n\t\t\tif (!password) {\n\t\t\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t\t}\n\n\t\t\t//validate, if there's no error message \n\n\t\t\t//userName\n\t\t\tif (userNameErrorStr == \"\") {\n\t\t\t\t// alert(\"username\")\n\t\t\t\tvalidateUserName(userName);\n\t\t}\n\t\t\t//firstName\n\t\t\tif (firstNameErrorStr == \"\") {\n\t\t\t\t\t// alert(\"first name\")\n\t\t\t\t\tvalidateFirstName(firstName);\n\t\t\t}\n\n\t\t\t//lastName\n\t\t\tif (lastNameErrorStr == \"\") {\n\t\t\t\t// alert(\"last name\")\n\t\t\t\tvalidateLastName(lastName);\n\t\t\t}\n\n\t\t\t//email\n\t\t\tif (emailErrorStr == \"\") {\n\t\t\t\tvalidateEmail(email);\n\t\t\t}\n\t\t\t\n\t\t\t//password\n\t\t\tif (passwordErrorStr == \"\") {\n\t\t\t\t\tvalidatePassword(password);\n\t\t\t}\n\n\t\t\tsetUserNameError(userNameErrorStr);\n\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\tsetEmailError(emailErrorStr);\n\t\t\tsetPasswError(passwordErrorStr);\n\t\t\t//changed here from nameErrorStr, guess it's fine?\n\t\t\treturn userNameErrorStr === \"\" && firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n\t\t}; \n\n\t//-----------------------------------------------\n\n\t//changed it from validaName to validateFirstName\n\t\tconst validateFirstName = newFirstName => {\n\t\tsetFirstNameError(\"\");\n\t\t//additonal: limiting input to the letters of the English alphabet, including capital letters\n\t\t\tif(!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\t//this ok?\n\t\t\t\tfirstNameErrorStr = \"Enter letters only\";\n\t\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t\t};\n\n\tconst validateLastName = newLastName => {\n\t\tsetLastNameError(\"\");\n\t\t//additonal: limiting input to a mix of letters and numbers\n\t\tif(!newLastName.match( /^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\tlastNameErrorStr = \"Enter letters only\";\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\tconst validateUserName = newUserName => {\n\t\tsetUserNameError(\"\");\n\t\t//additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\t\tif(!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n\t\t\tuserNameErrorStr = \"Only letters, numbers and underscore, and between 3-10 characters in username.\";\n\t\t\tsetUserNameError(userNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t// clear successful login for OK button\n\tlet clearMsgLogin = () => {\n\t\tsetLoginSuccessMessageVisible(false);\n\t}\n\n\t// ----------------------------------\n\n\t\t//additional: email formatting\n\t\tconst validateEmail = newEmail => {\n\t\t\tlet emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n\t\t\tlet isValidFormat = str => {\n\t\t\t\treturn str.match(emailFormat);\n\t\t\t}\n\n\t\t\tif (!isValidFormat(newEmail)) {\n\t\t\t\temailErrorStr = \"Oops! Bad email format.\";\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tconst validatePassword = newPassword => {\n\t\t\tif (newPassword.length == 1 || newPassword.length < 8) {\n\t\t\t\tpasswordErrorStr = \"Password must be longer than that.\";\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t//---------------\n\n\t\t//validation on onClick / Create Account button\n\t\tconst handleClick = e => {\n\t\t\tif (validate()) { \n\t\t\t\tsetSuccessfullAccountMessageVisible(true); \n\t\t\t\t//adding all new users, for \"All Data\"\n\t\t\t\tlet newUser = {\n\t\t\t\t\t\t\"userName\": userName,\n\t\t\t\t\t\t\"firstName\": firstName,\n\t\t\t\t\t\t\"lastName\": lastName,\n\t\t\t\t\t\t\"email\": email,\n\t\t\t\t\t\t\"password\": password\n\t\t\t\t};\n\t\t\t\tsetUsers(users => users.concat(newUser));\n\t\t\t} else {\n\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\tlet showSuccessMessageAccount = () => {\n\t\tif (successfullAccountMessageVisible) {\n\t\t\treturn (\n\t\t\t\t<div className=\"successMessage\">\n\t\t\t\t\t\t<h5>Awesome, {firstName}!</h5>\n\t\t\t\t\t\t<p>Your account was created.</p>\n\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t<button type=\"submit\" id=\"clearForm\" className=\"submitBtn btn btn-light\" onClick={() => clearForm()}>Ok</button>             \n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn;\n\t}\n\n\n\t//-----------------\n\n\t//validation on onClick / Login button\n\t\tconst handleClickLogin = e => {\n\t\tif (validateLogin()) { \n\t\t\tsetLoginSuccessMessageVisible(true); \n\t\t\tclearForm();\n\t\t} else {\n\t\treturn;\n\t\t}\n\t};\n\n\tconst handleFirstNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newFirstName = e.currentTarget.value;\n\t\tif (!newFirstName || validateFirstName(newFirstName)) {\n\t\t\tsetFirstName(newFirstName);\n\t\t}\n\t};\n\n\tconst handleLastNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newLastName = e.currentTarget.value;\n\t\tif (!newLastName || validateLastName(newLastName)) {\n\t\t\tsetLastName(newLastName);\n\t\t}\n\t};\n\n\tconst handleUserNameChange = e => {\n\t\tsetUserName(e.currentTarget.value);\n\t\t};\n\n\n\t\tconst handleEmailChange = e => {\n\t\t\tsetEmail(e.currentTarget.value);\n\t\t};\n\n\t\tconst handlePasswordChange = e => {        \n\t\t\tsetPassword(e.currentTarget.value);\n\t\t};\n\n\t\t//firing when creating new account\n\t\tconst clearForm = () => {\n\t\t\tsetFirstName(\"\");\n\t\t\tsetLastName(\"\");\n\t\t\tsetUserName(\"\");\n\t\t\tsetEmail(\"\");\n\t\t\tsetPassword(\"\");\n\t\t\tsetSuccessfullAccountMessageVisible(false);\n\t\t};\n\n\n\t\t// ------------------------------------------------------\n\n\t\t//from DEPOSIT COMPONENT\n\t\tlet [balance, setBalance] = useState(0.0);\n\t\tlet [depositAmount, setDepositAmount] = useState(0.0);\n\t\tlet [depositError, setDepositError] = useState(\"\");\n\t\tlet [depositArr, setDepositArr] = useState([]);\n\t\tconst [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false); \n\n\n\t\tlet depositErrorStr = \"\";\n\n\t\t//validating numbers for deposit and withdraw\n\t\tconst validateNr = newValue => {\n\t\t\t//clear error when there's new input\n\t\t\tsetDepositError(\"\");\n\t\t\tsetWithdrawError(\"\");\n\n\t\t\tif(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n\t\t\t\tdepositErrorStr = \"Enter numbers only.\";\n\t\t\t\t//this was missing:\n\t\t\t\twithdrawErrorStr = \"Enter numbers only.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t//this was missing:\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\treturn false; //didn't validate\n\t\t\t} \n\t\t\treturn true; //did validate\n\t\t};\n\n\t\t//input\n\t\tconst depositHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\tsetDepositAmount(newValue);\n\t\t\t} else {\n\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t}     \n\t\t\t// setSuccessMessageVisible(false);  \n\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t};\n\n\t\t//submit + additional validation \n\t\tconst submitDeposit = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\tdepositErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\tdepositErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//total amount / balance\n\t\t\tbalance += parseFloat(currentValue);\n\t\t\tsetBalance(balance);\n\t\t\tsetDepositSuccessMessageVisible(true);\n\t\t\tsetDepositAmount(0.0);\n\n\t\t\t//all new deposits for \"All Data\"\n\t\t\tlet newDeposit = {\n\t\t\t\t\"depositAmount\": depositAmount\n\t\t\t};\n\n\t\t\tsetDepositArr(depositArr => depositArr.concat(newDeposit));\n\t\t};\n\n\t// clear successful deposit & withdraw message for OK button\n\t\tlet clearMsgDeposit = () => {\n\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t// setDepositAmount(0.0); --> not doing it & probly not a good idea \n\t}\n\n\t\tlet showSuccessMessageDeposit = () => {\n\t\t\tif (depositSuccessMessageVisible) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"successMessage\">\n\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t<p>Your deposit was received!</p>\n\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t<button type=\"submit\" id=\"clearDep\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgDeposit()}>Ok</button>             \n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\n\t\t// ------------------------------------------------------\n\n\t\t//from WITHDRAW COMPONENT\n\t\tlet [withdrawAmount, setWithdrawAmount] = useState(0.0);\n\t\tlet [withdrawError, setWithdrawError] = useState(\"\");\n\t\tlet [withdrawArr, setWithdrawArr] = useState([]);\n\t\tconst [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n\n\t\tlet withdrawErrorStr = \"\";\n\n\t\t//input\n\t\tconst withdrawHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\tsetWithdrawAmount(newValue);\n\t\t\t} else {\n\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t} \n\t\t\tsetWithdrawSuccessMessageVisible(false);   \n\t\t};\n\n\t\t//submit + additional validation\n\t\t\tconst submitWithdrawal = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\twithdrawErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\twithdrawErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue > balance) {\n\t\t\t\twithdrawErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t} else {\n\t\t\t\tsetBalance(balance - parseFloat(currentValue));\n\t\t\t\tsetWithdrawError(\"\");\n\t\t\t\tsetWithdrawSuccessMessageVisible(true);\n\t\t\t\tsetWithdrawAmount(0.0);\n\t\t\t\t\n\t\t\t\t//all withdrawals, for \"All Data\"\n\t\t\t\tlet newWithdraw = {\n\t\t\t\t\t\"withdrawAmount\": withdrawAmount\n\t\t\t\t};\n\n\t\t\t\tsetWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n\t\t\t}\n\t\t};\n\n\t\tlet clearMsgWithdraw = () => {\n\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t// setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n\t\t}\n\n\t\tlet showSuccessMessageWithdraw = () => {\n\t\t\tif (withdrawSuccessMessageVisible) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"successMessage\">\n\t\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t\t<p>Your withdrawal was succesful.</p>\n\t\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t\t<button type=\"submit\" id=\"clearWith\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgWithdraw()}>Ok</button>             \n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\n\t\t//authentication\n\t\tconst [error, setError] = useState(\"\");\n\t\tconst [result, setResult] = useState(\"\");\n\n\t\tasync function authenticateWithAPI() {\n\n\t\t\tconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\t\t\tconst response = await fetch(`${API_URL}/auth/local`, {\n\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Accept\": \"application/json\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tidentifier: \"sebestyenboglarkacsilla@gmail.com\",\n\t\t\t\t\t\t\tpassword: \"SecretPassword666\"\n\t\t\t\t\t})\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\t\tconst responseObj = await response.json();\n\t\t\t\t\tCookies.set(\"token\", responseObj.jwt);\n\t\t\t} else {\n\t\t\t\t\tconsole.log(response.statusText)\n\t\t\t\t\tsetError(response.statusText);\n\t\t\t}\n\t\t}\n\n\n\t\t//export context\n\t\tconst defaultContext = {\n\t\t\t//state:\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\tuserName,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tfirstNameError,\n\t\t\tlastNameError,\n\t\t\tuserNameError,\n\t\t\temailError,\n\t\t\tpasswError,\n\t\t\tdepositAmount,\n\t\t\tbalance,\n\t\t\tdepositError,\n\t\t\tsuccessfullAccountMessageVisible,\n\t\t\twithdrawSuccessMessageVisible,\n\t\t\tdepositSuccessMessageVisible,\n\t\t\twithdrawAmount,\n\t\t\twithdrawError,\n\t\t\tusers,\n\t\t\tdepositArr,\n\t\t\twithdrawArr,\n\t\t\terror,\n\t\t\tresult,\n\t\t\tloggedInUserName,\n\t\t\n\t\t\t//functions:\n\t\t\tvalidate,\n\t\t\thandleClick,\n\t\t\thandleClickLogin,\n\t\t\thandleFirstNameChange,\n\t\t\thandleLastNameChange,\n\t\t\thandleUserNameChange,\n\t\t\thandleEmailChange,\n\t\t\thandlePasswordChange,\n\t\t\tvalidateNr,\n\t\t\tdepositHandleChange,\n\t\t\tsubmitDeposit,\n\t\t\tshowSuccessMessageDeposit,\n\t\t\twithdrawHandleChange,\n\t\t\tsubmitWithdrawal,\n\t\t\tshowSuccessMessageWithdraw,\n\t\t\tshowSuccessMessageLogin,\n\t\t\tshowSuccessMessageAccount,\n\t\t\tclearForm,\n\t\t\tauthenticateWithAPI,\n\t\t\tsetError,\t\t\t\n\t\t\tsetResult,\n\t\t\tsetLoggedInUserName,\n\t\t};\n\n\t\treturn (\n\t\t\t<MyContext.Provider value={defaultContext}>\n\t\t\t\t{children}\n\t\t\t</MyContext.Provider>\n\t\t)\n}\n\nexport {MyContext, MyContextProvider};\n"]},"metadata":{},"sourceType":"module"}