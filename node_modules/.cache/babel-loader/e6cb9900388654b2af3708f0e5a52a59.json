{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { MyContext } from \"../myContext/MyContext\";\nimport Card from \"../components/Card\"; //useQuery is a hook that we can use to send queries to the GQL server. it returns loading, error, and data\n//gql is a function that's used by apollo to convert a query string into a format it can use\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst USERS = gql`\n\tquery GetUsers {\n\t\tusername,\n\t\tfirstname,\n\t\tlastname,\n\t\temail\n\t}\n`;\n\nfunction AllData() {\n  _s();\n\n  //destructure loading, error, and data that we get from the useQuery function:\n  //it's going to make the query for us to Strapi and Strapi is going to send us back these 3 values\n  //data is an object\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(USERS);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this);\n  } // const {users, depositArr, withdrawArr} = useContext(MyContext);\n  // let currentTime = new Date().toLocaleString();\n\n\n  return (\n    /*#__PURE__*/\n    // we need Fragment, otherwise it returns an object\n    _jsxDEV(_Fragment, {\n      children: [data.users.map(user => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          bgcolor: \"info\",\n          header: \"Your Accounts\",\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"balance mb-3\",\n              children: \"Opened accounts:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alldata\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                children: [\"Name: \", user.firstname, \" \", user.lastname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: [\"Email address: \", user.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: [\"Password: \", user.password]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 6\n        }, this)\n      }, void 0, false)), depositArr.map(amount => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          bgcolor: \"info\",\n          header: \"Your Transactions\",\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"balance mb-3\",\n              children: \"Deposit:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alldata\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 6\n        }, this)\n      }, void 0, false)), withdrawArr.map(value => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          bgcolor: \"info\",\n          header: \"Your Transactions\",\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"balance mb-3\",\n              children: \"Withdraw:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alldata\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 5\n        }, this)\n      }, void 0, false))]\n    }, void 0, true)\n  ); //return\n}\n\n_s(AllData, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = AllData;\n; //function\n\nexport default AllData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllData\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js"],"names":["React","useContext","MyContext","Card","useQuery","gql","USERS","AllData","loading","error","data","users","map","user","firstname","lastname","email","password","depositArr","amount","withdrawArr","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAiC,OAAjC;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAEA;AACA;;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;;AAEA,MAAMC,KAAK,GAAGD,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASE,OAAT,GAAmB;AAAA;;AAClB;AACA;AACA;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACE,KAAD,CAAvC;;AAEA,MAAIE,OAAJ,EAAa;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AACD,MAAIC,KAAJ,EAAW;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAXiB,CAalB;AACA;;;AACA;AAAA;AACC;AACA;AAAA,iBACEC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACf;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,OAAO,EAAC,MADT;AAEC,UAAA,MAAM,EAAC,eAFR;AAGC,UAAA,IAAI,eACF;AAAA,oCACC;AAAI,cAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCAEC;AAAA,qCAAWA,IAAI,CAACC,SAAhB,OAA4BD,IAAI,CAACE,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFD,eAGC;AAAA,8CAAoBF,IAAI,CAACG,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHD,eAIC;AAAA,yCAAeH,IAAI,CAACI,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAJH;AAAA;AAAA;AAAA;AAAA;AADD,uBADA,CADF,EAqBEC,UAAU,CAACN,GAAX,CAAgBO,MAAD,iBACf;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,OAAO,EAAC,MADT;AAEC,UAAA,MAAM,EAAC,mBAFR;AAGC,UAAA,IAAI,eACF;AAAA,oCACC;AAAI,cAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCAGC;AAAA;AAAA;AAAA;AAAA,sBAHD,eAIC;AAAA;AAAA;AAAA;AAAA,sBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAJH;AAAA;AAAA;AAAA;AAAA;AADD,uBADA,CArBF,EAyCCC,WAAW,CAACR,GAAZ,CAAiBS,KAAD,iBAChB;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,OAAO,EAAC,MADT;AAEC,UAAA,MAAM,EAAC,mBAFR;AAGC,UAAA,IAAI,eACF;AAAA,oCACC;AAAI,cAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCAGC;AAAA;AAAA;AAAA;AAAA,sBAHD,eAIC;AAAA;AAAA;AAAA;AAAA,sBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAJH;AAAA;AAAA;AAAA;AAAA;AADD,uBADA,CAzCD;AAAA;AAFD,IAfkB,CA8EhB;AACF;;GA/EQd,O;UAIuBH,Q;;;KAJvBG,O;AA+ER,C,CAAE;;AAGH,eAAeA,OAAf","sourcesContent":["import React, {useContext } from 'react';\r\nimport {MyContext} from \"../myContext/MyContext\";\r\nimport Card from \"../components/Card\";\r\n\r\n//useQuery is a hook that we can use to send queries to the GQL server. it returns loading, error, and data\r\n//gql is a function that's used by apollo to convert a query string into a format it can use\r\nimport {useQuery, gql} from \"@apollo/client\";\r\n\r\nconst USERS = gql`\r\n\tquery GetUsers {\r\n\t\tusername,\r\n\t\tfirstname,\r\n\t\tlastname,\r\n\t\temail\r\n\t}\r\n`\r\n\r\nfunction AllData() {\r\n\t//destructure loading, error, and data that we get from the useQuery function:\r\n\t//it's going to make the query for us to Strapi and Strapi is going to send us back these 3 values\r\n\t//data is an object\r\n\tconst {loading, error, data} = useQuery(USERS)\r\n\r\n\tif (loading) {\r\n\t\treturn <p>Loading...</p>\r\n\t}\r\n\tif (error) {\r\n\t\treturn <p>Error.</p>\r\n\t}\r\n\r\n\t// const {users, depositArr, withdrawArr} = useContext(MyContext);\r\n\t// let currentTime = new Date().toLocaleString();\r\n\treturn (\r\n\t\t// we need Fragment, otherwise it returns an object\r\n\t\t<>  \r\n\t\t\t{data.users.map((user) => \r\n\t\t\t\t<>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tbgcolor=\"info\"\r\n\t\t\t\t\t\theader=\"Your Accounts\"\r\n\t\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t\t<h5 className=\"balance mb-3\">Opened accounts:</h5>\r\n\t\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t\t{/* <h6>Creation date: {currentTime}</h6> */}\r\n\t\t\t\t\t\t\t\t\t\t<h6>Name: {user.firstname} {user.lastname}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Email address: {user.email}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Password: {user.password}</h6>\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\r\n\t\t\t{depositArr.map((amount) => \r\n\t\t\t\t<>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tbgcolor=\"info\"\r\n\t\t\t\t\t\theader=\"Your Transactions\"\r\n\t\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t\t<h5 className=\"balance mb-3\">Deposit:</h5>\r\n\t\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t\t{/* <h6>Creation date: {currentTime}</h6> */}\r\n\t\t\t\t\t\t\t\t\t\t{/* <h6>Amount: ${amount.depositAmount}</h6> */}\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</>\r\n\t\t\t)}\r\n\r\n\t\t{withdrawArr.map((value) => \r\n\t\t\t<>\r\n\t\t\t\t<Card \r\n\t\t\t\t\tbgcolor=\"info\"\r\n\t\t\t\t\theader=\"Your Transactions\"\r\n\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t<h5 className=\"balance mb-3\">Withdraw:</h5>\r\n\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t{/* <h6>Creation date: {currentTime}</h6> */}\r\n\t\t\t\t\t\t\t\t\t{/* <h6>Amount: ${value.withdrawAmount}</h6> */}\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<br/>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t) //return\r\n}; //function\r\n\r\n\t\r\nexport default AllData;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}