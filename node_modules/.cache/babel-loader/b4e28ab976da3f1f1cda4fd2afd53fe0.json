{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js\";\nimport React, { useContext } from 'react';\nimport { MyContext } from \"../myContext/MyContext\";\nimport Card from \"../components/Card\"; //useQuery is a hook that we can use to send queries to the GQL server. it returns loading, error, and data\n//gql is a function that's used by apollo to convert a query string into a format it can use\n\nimport { useQuery, gql } from \"@apollo/client\"; // const USERS = gql`\n// \tquery GetUsers {\n// \t\tnewusers {\n// \t\t\tusername,\n// \t\t\tfirstname,\n// \t\t\tlastname,\n// \t\t\temail\n// \t\t}\n// \t}\n// `\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllData() {\n  //destructure loading, error, and data that we get from the useQuery function:\n  //it's going to make the query for us to Strapi and Strapi is going to send us back these 3 values\n  //data is an object\n  // const {loading, error, data} = useQuery(USERS);\n  // if (loading) {\n  // \treturn <p>Loading...</p>\n  // }\n  // if (error) {\n  // \treturn <p>Error.</p>\n  // }\n  // const {users, depositArr, withdrawArr} = useContext(MyContext);\n  // let currentTime = new Date().toLocaleString();\n  return (\n    /*#__PURE__*/\n    // we need Fragment, otherwise it returns an object\n    _jsxDEV(_Fragment, {\n      children: data.newusers.map(user =>\n      /*#__PURE__*/\n      //Each child in a list should have a unique \"key\" prop.\n      //wrong placement, dunno why is this incorrect\n      _jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          bgcolor: \"warning\",\n          header: \"Your Accounts\",\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this)\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this))\n    }, void 0, false)\n  ); //return\n}\n\n_c = AllData;\n; //function\n\nexport default AllData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllData\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js"],"names":["React","useContext","MyContext","Card","useQuery","gql","AllData","data","newusers","map","user","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAiC,OAAjC;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAEA;AACA;;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,OAAT,GAAmB;AAClB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACC;AACA;AAAA,gBACEC,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAmBC,IAAD;AAAA;AACnB;AACA;AACC;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,OAAO,EAAC,SADT;AAEC,UAAA,MAAM,EAAC,eAFR;AAGC,UAAA,IAAI,eACF;AAJH;AAAA;AAAA;AAAA;AAAA;AADD,SAAUA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,cAHA;AADF;AAFD,IAfkB,CAgFhB;AACF;;KAjFQL,O;AAiFR,C,CAAE;;AAGH,eAAeA,OAAf","sourcesContent":["import React, {useContext } from 'react';\r\nimport {MyContext} from \"../myContext/MyContext\";\r\nimport Card from \"../components/Card\";\r\n\r\n//useQuery is a hook that we can use to send queries to the GQL server. it returns loading, error, and data\r\n//gql is a function that's used by apollo to convert a query string into a format it can use\r\nimport {useQuery, gql} from \"@apollo/client\";\r\n\r\n// const USERS = gql`\r\n// \tquery GetUsers {\r\n// \t\tnewusers {\r\n// \t\t\tusername,\r\n// \t\t\tfirstname,\r\n// \t\t\tlastname,\r\n// \t\t\temail\r\n// \t\t}\r\n// \t}\r\n// `\r\n\r\nfunction AllData() {\r\n\t//destructure loading, error, and data that we get from the useQuery function:\r\n\t//it's going to make the query for us to Strapi and Strapi is going to send us back these 3 values\r\n\t//data is an object\r\n\t// const {loading, error, data} = useQuery(USERS);\r\n\r\n\t// if (loading) {\r\n\t// \treturn <p>Loading...</p>\r\n\t// }\r\n\t// if (error) {\r\n\t// \treturn <p>Error.</p>\r\n\t// }\r\n\r\n\t// const {users, depositArr, withdrawArr} = useContext(MyContext);\r\n\t// let currentTime = new Date().toLocaleString();\r\n\treturn (\r\n\t\t// we need Fragment, otherwise it returns an object\r\n\t\t<>  \r\n\t\t\t{data.newusers.map((user) => \r\n\t\t\t//Each child in a list should have a unique \"key\" prop.\r\n\t\t\t//wrong placement, dunno why is this incorrect\r\n\t\t\t\t<div key={user.id}>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tbgcolor=\"warning\"\r\n\t\t\t\t\t\theader=\"Your Accounts\"\r\n\t\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t\t{/* <h5 className=\"balance mb-3\">Opened accounts:</h5>\r\n\t\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t\t<h6>Creation date: {user.date}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Name: {user.firstname} {user.lastname}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Username: {user.username} </h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Email address: {user.email}</h6>\r\n\t\t\t\t\t\t\t\t\t</div> */}\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t{/* {depositArr.map((amount) => \r\n\t\t\t\t<>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tbgcolor=\"info\"\r\n\t\t\t\t\t\theader=\"Your Transactions\"\r\n\t\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t\t<h5 className=\"balance mb-3\">Deposit:</h5>\r\n\t\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t\t<h6>Creation date: {currentTime}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<h6>Amount: ${amount.depositAmount}</h6>\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</>\r\n\t\t\t)} */}\r\n\r\n\t\t{/* {withdrawArr.map((value) => \r\n\t\t\t<>\r\n\t\t\t\t<Card \r\n\t\t\t\t\tbgcolor=\"info\"\r\n\t\t\t\t\theader=\"Your Transactions\"\r\n\t\t\t\t\tbody={\r\n\t\t\t\t\t\t\t<>  \r\n\t\t\t\t\t\t\t\t<h5 className=\"balance mb-3\">Withdraw:</h5>\r\n\t\t\t\t\t\t\t\t<div className=\"alldata\">\r\n\t\t\t\t\t\t\t\t\t<h6>Creation date: {currentTime}</h6>\r\n\t\t\t\t\t\t\t\t\t<h6>Amount: ${value.withdrawAmount}</h6>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<br/>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)} */}\r\n\t\t</>\r\n\t) //return\r\n}; //function\r\n\r\n\t\r\nexport default AllData;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}