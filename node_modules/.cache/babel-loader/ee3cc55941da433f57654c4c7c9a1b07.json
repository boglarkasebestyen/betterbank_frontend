{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { MyContext } from \"../myContext/MyContext\";\nimport Cookies from \"js-cookie\";\nimport Card from \"../components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllData() {\n  _s();\n\n  let [transactions, setTransactions] = useState([]);\n  const {\n    authenticateWithAPI,\n    setError\n  } = useContext(MyContext);\n  useEffect(() => {\n    getAlldata();\n  }, []);\n\n  async function getAlldata() {\n    let userToken = Cookies.get(\"token\");\n\n    if (!userToken) {\n      authenticateWithAPI();\n      userToken = Cookies.get(\"token\");\n    }\n\n    let username = Cookies.get(\"username\");\n\n    if (!username) {\n      return;\n    }\n\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n    const response = await fetch(`${API_URL}/transactions/alltransactions`, {\n      method: \"POST\",\n      headers: userToken && {\n        Authorization: `Bearer ${userToken}`\n      },\n      body: JSON.stringify({\n        username: username\n      })\n    });\n\n    if (!response.ok) {\n      console.log(response.statusText);\n      setError(response.statusText);\n    } else {\n      const responseObj = await response.json();\n      const error = responseObj.error;\n\n      if (error) {\n        setError(error);\n        return;\n      }\n\n      setTransactions(responseObj);\n    }\n\n    ;\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bgcolor: \"warning\",\n    header: \"All Transactions\",\n    body: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"getalldata\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"To\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"From\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), transactions.map((transaction, index) => {\n          function formatMyDate() {\n            let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en-US';\n            return new Date(value);\n          }\n\n          let timestamp = transaction.createdAt;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.to\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.from\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formatMyDate(timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 12\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }, this)\n    /* <br/>\r\n    <>\r\n    <table>\r\n    \t\t<tbody>\r\n    \t\t\t<tr>\r\n    \t\t\t\t<th>From</th>\r\n    \t\t\t</tr>\r\n    \t\t\t{transactions.map((transaction, index) => {\r\n    \t\t\t\treturn (\r\n    \t\t\t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n    \t\t\t\t\t\t<td>{transaction.from}</td>\r\n    \t\t\t\t\t</tr>\r\n    \t\t\t\t);\r\n    \t\t\t})}\r\n    \t\t</tbody>\r\n    \t</table> \r\n    </>\r\n    <br/>\r\n    </><>\r\n    <table>\r\n    <tbody>\r\n    \t<tr>\r\n    \t\t<th>Amount</th>\r\n    \t</tr>\r\n    \t{transactions.map((transaction, index) => {\r\n    \t\treturn (\r\n    \t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n    \t\t\t\t<td>{transaction.amount}</td>\r\n    \t\t\t</tr>\r\n    \t\t);\r\n    \t})}\r\n    </tbody>\r\n    </table> \r\n    <br/>\r\n    </></><>\r\n    <table>\r\n    \t<tbody>\r\n    \t\t<tr>\r\n    \t\t\t<th>Date</th>\r\n    \t\t</tr>\r\n    \t\t{transactions.map((transaction, index) => {\r\n    \t\t\treturn (\r\n    \t\t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n    \t\t\t\t\t<td>{transaction.createdAt}</td>\r\n    \t\t\t\t</tr>\r\n    \t\t\t);\r\n    \t\t})}\r\n    \t</tbody>\r\n    </table> \r\n    </></> */\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 4\n  }, this);\n}\n\n_s(AllData, \"CBEOftWuJxD4OOqBOlFXIIVgNkA=\");\n\n_c = AllData;\n;\nexport default AllData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllData\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/pages/AllData.js"],"names":["React","useContext","useState","useEffect","MyContext","Cookies","Card","AllData","transactions","setTransactions","authenticateWithAPI","setError","getAlldata","userToken","get","username","API_URL","process","env","NEXT_PUBLIC_API_URL","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","console","log","statusText","responseObj","json","error","map","transaction","index","formatMyDate","value","Date","timestamp","createdAt","to","from","amount"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport {MyContext} from \"../myContext/MyContext\";\r\nimport Cookies from \"js-cookie\";\r\nimport Card from \"../components/Card\";\r\n\r\n\r\nfunction AllData() {\r\n\r\n\tlet [transactions, setTransactions] = useState([]);\r\n\r\n\tconst {\r\n\t\tauthenticateWithAPI,\r\n\t\tsetError,\r\n\t} = useContext(MyContext);\r\n\r\n\tuseEffect(()=> {\r\n\t\tgetAlldata();\r\n\t}, []); \r\n\r\n\r\n\tasync function getAlldata() {\r\n\r\n\t\tlet userToken = Cookies.get(\"token\");\r\n\t\tif (!userToken) {\r\n\t\t\tauthenticateWithAPI();\r\n\t\t\tuserToken = Cookies.get(\"token\");\r\n\t\t}\r\n\r\n\t\tlet username = Cookies.get(\"username\");\r\n\t\tif (!username) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\r\n\t\tconst response = await fetch(`${API_URL}/transactions/alltransactions`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: userToken && { Authorization: `Bearer ${userToken}` },\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tusername: username\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\t\tif (!response.ok) {\r\n\t\t\tconsole.log(response.statusText)\r\n\t\t\tsetError(response.statusText);\r\n\t\t\t} else {\r\n\t\t\t\tconst responseObj = await response.json();\r\n\t\t\t\tconst error = responseObj.error;\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\tsetError(error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tsetTransactions(responseObj);\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t\tbgcolor=\"warning\"\r\n\t\t\t\theader=\"All Transactions\"\r\n\t\t\t\tbody={\r\n\t\t\t\t\t<div className=\"getalldata\">\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<th>To</th>\r\n\t\t\t\t\t\t\t\t\t<th>From</th>\r\n\t\t\t\t\t\t\t\t\t<th>Amount</th>\r\n\t\t\t\t\t\t\t\t\t<th>Date</th>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t{transactions.map((transaction, index) => {\r\n\r\n\t\t\t\t\t\t\t\t\tfunction formatMyDate(value = 'en-US') {\r\n\t\t\t\t\t\t\t\t\t\treturn new Date(value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet timestamp = transaction.createdAt;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>{transaction.to}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>{transaction.from}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>{transaction.amount}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>{formatMyDate(timestamp)}</td>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</table> \r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t/* <br/>\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th>From</th>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t{transactions.map((transaction, index) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{transaction.from}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</table> \r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t</><>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Amount</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t{transactions.map((transaction, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n\t\t\t\t\t\t\t\t\t\t<td>{transaction.amount}</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table> \r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t</></><>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<th>Date</th>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t{transactions.map((transaction, index) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<tr key={index} className=\"alldata\" style={{display:\"inline-block\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>{transaction.createdAt}</td>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table> \r\n\t\t\t\t\t</></> */}\r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t)\r\n};\r\n\r\n\t\r\nexport default AllData;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}