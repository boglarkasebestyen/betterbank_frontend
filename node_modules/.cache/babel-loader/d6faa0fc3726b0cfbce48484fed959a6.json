{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/badBank_ref2/src/myContext/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //from CREATE ACCOUNT COMPONENT\n  const [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\"); // new\n\n  const [userName, setUserName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstNameError, setFirstNameError] = useState(\"\");\n  const [lastNameError, setLastNameError] = useState(\"\"); // new\n\n  const [userNameError, setUserNameError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [users, setUsers] = useState([]); // old: let nameErrorStr = \"\";\n\n  let firstNameErrorStr = \"\";\n  let lastNameErrorStr = \"\"; // new\n\n  let userNameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const [loginSuccessMessageVisible, setLoginSuccessMessageVisible] = useState(false);\n\n  const validateLogin = () => {\n    setUserNameError(\"\");\n    setPasswError(\"\"); //username\n\n    if (!userName) {\n      userNameErrorStr = \"Oops! Your username can't be blank.\";\n    } else if (userName.length == 1) {\n      userNameErrorStr = \"Username name must be longer than that.\";\n    } //password\n\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //username\n\n\n    if (userNameErrorStr == \"\") {\n      validateUserName(userName);\n    } //password\n\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setUserNameError(userNameErrorStr);\n    setPasswError(passwordErrorStr);\n    return userNameErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  let showSuccessMessageLogin = () => {\n    if (loginSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Awesome, \", firstName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You are logged in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearLogin\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgLogin(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------\n\n\n  const validate = () => {\n    setFirstNameError(\"\");\n    setLastNameError(\"\"); // setUserNameError(\"\");\n\n    setEmailError(\"\");\n    setPasswError(\"\"); //email\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    } //firstName\n\n\n    if (!firstName) {\n      firstNameErrorStr = \"Oops! Your first name can't be blank.\"; //additional: name length \n    } else if (firstName.length < 2) {\n      firstNameErrorStr = \"First name must be longer than that.\";\n    } //lastName\n\n\n    if (!lastName) {\n      lastNameErrorStr = \"Oops! Your last name can't be blank.\"; //additional: name length \n    } else if (lastName.length < 2) {\n      lastNameErrorStr = \"Last name must be longer than that.\";\n    } //password\n\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //validate, if there's no error message \n    //firstName\n\n\n    if (firstNameErrorStr == \"\") {\n      // alert(\"first name\")\n      validateFirstName(firstName);\n    } //lastName\n\n\n    if (lastNameErrorStr == \"\") {\n      // alert(\"last name\")\n      validateLastName(lastName);\n    } //email\n\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    } //password\n\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setFirstNameError(firstNameErrorStr);\n    setLastNameError(lastNameErrorStr);\n    setUserNameError(userNameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr); //changed here from nameErrorStr, guess it's fine?\n\n    return firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  }; //-----------------------------------------------\n  //changed it from validaName to validateFirstName\n\n\n  const validateFirstName = newFirstName => {\n    setFirstNameError(\"\"); //additonal: limiting input to the letters of the English alphabet, including capital letters\n\n    if (!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      //this ok?\n      firstNameErrorStr = \"Enter letters only\";\n      setFirstNameError(firstNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateLastName = newLastName => {\n    setLastNameError(\"\"); //additonal: limiting input to a mix of letters and numbers\n\n    if (!newLastName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      //this ok?\n      lastNameErrorStr = \"Enter letters only\";\n      setLastNameError(lastNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateUserName = newUserName => {\n    setUserNameError(\"\"); //additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\n    if (!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n      //this ok?\n      userNameErrorStr = \"Letters, numbers and underscore only, between 3 to 10 characters\";\n      setUserNameError(userNameErrorStr);\n      return false;\n    }\n\n    return true;\n  }; // clear successful login for OK button\n\n\n  let clearMsgLogin = () => {\n    setLoginSuccessMessageVisible(false);\n  }; // -------------------------------------------------------------------------------\n  //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Invalid email.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      setSuccessfullAccountMessageVisible(true); //adding all new users, for \"All Data\"\n\n      let newUser = {\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"email\": email,\n        \"password\": password\n      };\n      setUsers(users => users.concat(newUser));\n    } else {\n      return;\n    }\n  }; //validation on onClick / Create Account button\n\n\n  const handleClickLogin = e => {\n    if (validateLogin()) {\n      setSuccessfullAccountMessageVisible(true);\n      clearForm();\n    }\n  }; //FORM INPUT  \n  // const handleNameChange = e => {\n  // \t\t// setName(e.currentTarget.value); //if there's no letter validation\n  // \t\tlet newName = e.currentTarget.value;\n  // \t\tif (!newName || validateName(newName)) {\n  // \t\t\t\tsetName(newName);\n  // \t\t}\n  // }; -->\n  //works\n\n\n  const handleFirstNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newFirstName = e.currentTarget.value;\n\n    if (!newFirstName || validateFirstName(newFirstName)) {\n      setFirstName(newFirstName);\n    }\n  }; //works\n\n\n  const handleLastNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newLastName = e.currentTarget.value;\n\n    if (!newLastName || validateLastName(newLastName)) {\n      setLastName(newLastName);\n    }\n  };\n\n  const handleUserNameChange = e => {\n    setUserName(e.currentTarget.value);\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  }; //firing when creating new account\n\n\n  const clearForm = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setUserName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessfullAccountMessageVisible(false);\n  }; // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [balance, setBalance] = useState(0.0);\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [depositError, setDepositError] = useState(\"\");\n  let [depositArr, setDepositArr] = useState([]);\n  const [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false);\n  let depositErrorStr = \"\"; //validating numbers for deposit and withdraw\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Enter numbers only.\"; //this was missing:\n\n      withdrawErrorStr = \"Enter numbers only.\";\n      setDepositError(depositErrorStr); //this was missing:\n\n      setWithdrawError(withdrawErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //input\n\n\n  const depositHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    } // setSuccessMessageVisible(false);  \n\n\n    setDepositSuccessMessageVisible(false);\n  }; //submit + additional validation \n\n\n  const submitDeposit = currentValue => {\n    if (currentValue == 0.0) {\n      depositErrorStr = \"Amount must be higher than 0.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      depositErrorStr = \"Amount must be lower than that.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    } //total amount / balance\n\n\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setDepositSuccessMessageVisible(true);\n    setDepositAmount(0.0); //all new deposits for \"All Data\"\n\n    let newDeposit = {\n      \"depositAmount\": depositAmount\n    };\n    setDepositArr(depositArr => depositArr.concat(newDeposit));\n  }; // clear successful deposit & withdraw message for OK button\n\n\n  let clearMsgDeposit = () => {\n    setDepositSuccessMessageVisible(false); // setDepositAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showSuccessMessageDeposit = () => {\n    if (depositSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearDep\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgDeposit(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 6\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  let [withdrawArr, setWithdrawArr] = useState([]);\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let withdrawErrorStr = \"\"; //input\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue == 0.0) {\n      withdrawErrorStr = \"Amount must be higher than 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      withdrawErrorStr = \"Amount must be lower than that.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n      setWithdrawAmount(0.0); //all withdrawals, for \"All Data\"\n\n      let newWithdraw = {\n        \"withdrawAmount\": withdrawAmount\n      };\n      setWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n    }\n  };\n\n  let clearMsgWithdraw = () => {\n    setWithdrawSuccessMessageVisible(false); // setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your withdrawal was succesful.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearWith\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgWithdraw(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 7\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    firstName,\n    lastName,\n    userName,\n    email,\n    password,\n    firstNameError,\n    lastNameError,\n    userNameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    successfullAccountMessageVisible,\n    withdrawSuccessMessageVisible,\n    depositSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    depositArr,\n    withdrawArr,\n    //functions:\n    validate,\n    handleClick,\n    handleClickLogin,\n    handleFirstNameChange,\n    handleLastNameChange,\n    handleUserNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateNr,\n    depositHandleChange,\n    submitDeposit,\n    showSuccessMessageDeposit,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showSuccessMessageWithdraw,\n    showSuccessMessageLogin\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 518,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MyContextProvider, \"zN2Pi+E8GUY0tWijLNrWoL8TItw=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/badBank_ref2/src/myContext/MyContext.js"],"names":["React","createContext","useState","MyContext","MyContextProvider","children","successfullAccountMessageVisible","setSuccessfullAccountMessageVisible","firstName","setFirstName","lastName","setLastName","userName","setUserName","email","setEmail","password","setPassword","firstNameError","setFirstNameError","lastNameError","setLastNameError","userNameError","setUserNameError","emailError","setEmailError","passwError","setPasswError","users","setUsers","firstNameErrorStr","lastNameErrorStr","userNameErrorStr","emailErrorStr","passwordErrorStr","loginSuccessMessageVisible","setLoginSuccessMessageVisible","validateLogin","length","validateUserName","validatePassword","showSuccessMessageLogin","clearMsgLogin","validate","validateFirstName","validateLastName","validateEmail","newFirstName","match","newLastName","newUserName","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","handleClickLogin","clearForm","handleFirstNameChange","currentTarget","value","handleLastNameChange","handleUserNameChange","handleEmailChange","handlePasswordChange","balance","setBalance","depositAmount","setDepositAmount","depositError","setDepositError","depositArr","setDepositArr","depositSuccessMessageVisible","setDepositSuccessMessageVisible","depositErrorStr","validateNr","newValue","setWithdrawError","withdrawErrorStr","depositHandleChange","target","slice","submitDeposit","currentValue","parseFloat","newDeposit","clearMsgDeposit","showSuccessMessageDeposit","withdrawAmount","setWithdrawAmount","withdrawError","withdrawArr","setWithdrawArr","withdrawSuccessMessageVisible","setWithdrawSuccessMessageVisible","withdrawHandleChange","submitWithdrawal","newWithdraw","clearMsgWithdraw","showSuccessMessageWithdraw","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\n\nconst MyContext = createContext();\n\nfunction MyContextProvider({children}) {\n\n    //from CREATE ACCOUNT COMPONENT\n    const [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false); \n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n\t// new\n\tconst [userName, setUserName] = useState(\"\");\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const [firstNameError, setFirstNameError] = useState(\"\");\n\tconst [lastNameError, setLastNameError] = useState(\"\");\n\n\t// new\n\tconst [userNameError, setUserNameError] = useState(\"\");\n\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwError, setPasswError] = useState(\"\");\n\n    const [users, setUsers] = useState([]);\n\n\t// old: let nameErrorStr = \"\";\n    let firstNameErrorStr = \"\";\n\tlet lastNameErrorStr = \"\";\n\t// new\n\tlet userNameErrorStr = \"\";\n\n    let emailErrorStr = \"\";\n    let passwordErrorStr = \"\";\n\n\n    //NO INPUT + ADDITIONAL VALIDATION\n\tconst [loginSuccessMessageVisible, setLoginSuccessMessageVisible] = useState(false); \n\n\tconst validateLogin = () => {\n\t\tsetUserNameError(\"\");\n\t\tsetPasswError(\"\");\n\n\t\t//username\n\t\tif (!userName) {\n\t\t\tuserNameErrorStr = \"Oops! Your username can't be blank.\";\n\t\t\t} else if (userName.length == 1) {\n\t\t\tuserNameErrorStr = \"Username name must be longer than that.\";\n\t\t}\n\n\t\t//password\n\t\tif (!password) {\n\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t}\n\n\t\t//username\n\t\tif (userNameErrorStr == \"\") {\n\t\t\tvalidateUserName(userName);\n\t\t}\n\n\t\t//password\n\t\tif (passwordErrorStr == \"\") {\n\t\t\tvalidatePassword(password);\n\t\t}\n\n\t\tsetUserNameError(userNameErrorStr);\n\t\tsetPasswError(passwordErrorStr);\n\t\treturn userNameErrorStr === \"\" && passwordErrorStr === \"\";\n\t\t//returns true and validate() is executed\n\n\t};\n\n\tlet showSuccessMessageLogin = () => {\n\t\tif (loginSuccessMessageVisible) {\n\t\t\treturn (\n\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t<h5>Awesome, {firstName}!</h5>\n\t\t\t\t\t\t<p>You are logged in.</p>\n\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t<button type=\"submit\" id=\"clearLogin\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgLogin()}>Ok</button>             \n\t\t\t\t</div>\n\n\t\t\t)\n\t\t}\n\t\treturn;\n};\n\n\n\t// ------------------------------\n\n    const validate = () => {\n\t\t\tsetFirstNameError(\"\");\n\t\t\tsetLastNameError(\"\");\n\t\t\t// setUserNameError(\"\");\n\t\t\tsetEmailError(\"\");\n\t\t\tsetPasswError(\"\");\n\n\t\t\t//email\n\t\t\tif (!email) {\n\t\t\t\t\temailErrorStr = \"Oops! Your email can't be blank.\";\n\t\t\t\t\t//additional: email length \n\t\t\t} else if (email.length == 1) {\n\t\t\t\t\temailErrorStr = \"Email must be longer than that.\";\n\t\t\t}\n\n\t\t\t//firstName\n\t\t\tif (!firstName) {\n\t\t\t\t\tfirstNameErrorStr = \"Oops! Your first name can't be blank.\";\n\t\t\t\t\t//additional: name length \n\t\t\t} else  if (firstName.length < 2) {\n\t\t\t\t\tfirstNameErrorStr = \"First name must be longer than that.\";\n\t\t\t} \n\n\t\t\t//lastName\n\t\t\tif (!lastName) {\n\t\t\t\tlastNameErrorStr = \"Oops! Your last name can't be blank.\";\n\t\t\t\t//additional: name length \n\t\t\t} else  if (lastName.length < 2) {\n\t\t\t\tlastNameErrorStr = \"Last name must be longer than that.\";\n\t\t\t} \n\n\t\t\t//password\n\t\t\tif (!password) {\n\t\t\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t\t}\n\n\t\t\t//validate, if there's no error message \n\t\t\t//firstName\n\t\t\tif (firstNameErrorStr == \"\") {\n\t\t\t\t\t// alert(\"first name\")\n\t\t\t\t\tvalidateFirstName(firstName);\n\t\t\t}\n\n\t\t\t//lastName\n\t\t\tif (lastNameErrorStr == \"\") {\n\t\t\t\t// alert(\"last name\")\n\t\t\t\tvalidateLastName(lastName);\n\t\t\t}\n\n\t\t\t//email\n\t\t\tif (emailErrorStr == \"\") {\n\t\t\t\tvalidateEmail(email);\n\t\t\t}\n\t\t\t\n\t\t\t//password\n\t\t\tif (passwordErrorStr == \"\") {\n\t\t\t\t\tvalidatePassword(password);\n\t\t\t}\n\n\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\tsetUserNameError(userNameErrorStr);\n\t\t\tsetEmailError(emailErrorStr);\n\t\t\tsetPasswError(passwordErrorStr);\n\t\t\t//changed here from nameErrorStr, guess it's fine?\n\t\t\treturn firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n    }; \n\n\t//-----------------------------------------------\n\n\t//changed it from validaName to validateFirstName\n    const validateFirstName = newFirstName => {\n\t\tsetFirstNameError(\"\");\n\t\t//additonal: limiting input to the letters of the English alphabet, including capital letters\n\t\t\tif(!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\t//this ok?\n\t\t\t\tfirstNameErrorStr = \"Enter letters only\";\n\t\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    \t};\n\n\tconst validateLastName = newLastName => {\n\t\tsetLastNameError(\"\");\n\t\t//additonal: limiting input to a mix of letters and numbers\n\t\tif(!newLastName.match( /^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t//this ok?\n\t\t\tlastNameErrorStr = \"Enter letters only\";\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\tconst validateUserName = newUserName => {\n\t\tsetUserNameError(\"\");\n\t\t//additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\t\tif(!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n\t\t//this ok?\n\t\t\tuserNameErrorStr = \"Letters, numbers and underscore only, between 3 to 10 characters\";\n\t\t\tsetUserNameError(userNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t// clear successful login for OK button\n\tlet clearMsgLogin = () => {\n\t\tsetLoginSuccessMessageVisible(false);\n\t}\n\n\n\n// -------------------------------------------------------------------------------\n\n    //additional: email formatting\n    const validateEmail = newEmail => {\n\t\t\tlet emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n\t\t\tlet isValidFormat = str => {\n\t\t\t\t\treturn str.match(emailFormat);\n\t\t\t}\n\n\t\t\tif (!isValidFormat(newEmail)) {\n\t\t\t\t\temailErrorStr = \"Oops! Invalid email.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    const validatePassword = newPassword => {\n\t\t\tif (newPassword.length == 1 || newPassword.length < 8) {\n\t\t\t\t\tpasswordErrorStr = \"Password must be longer than that.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n\t\t\tif (validate()) { \n\t\t\t\t\tsetSuccessfullAccountMessageVisible(true); \n\t\t\t\t\t//adding all new users, for \"All Data\"\n\t\t\t\t\tlet newUser = {\n\t\t\t\t\t\t\t\"firstName\": firstName,\n\t\t\t\t\t\t\t\"lastName\": lastName,\n\t\t\t\t\t\t\t\"email\": email,\n\t\t\t\t\t\t\t\"password\": password\n\t\t\t\t\t};\n\t\t\t\t\tsetUsers(users => users.concat(newUser));\n\t\t\t} else {\n\t\t\treturn;\n\t\t\t}\n    };\n\n\t//validation on onClick / Create Account button\n    const handleClickLogin = e => {\n\t\tif (validateLogin()) { \n\t\t\t\tsetSuccessfullAccountMessageVisible(true); \n\t\t\t\tclearForm();\n\t\t}\n\t};\n\n    //FORM INPUT  \n    // const handleNameChange = e => {\n\t// \t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t// \t\tlet newName = e.currentTarget.value;\n\t// \t\tif (!newName || validateName(newName)) {\n\t// \t\t\t\tsetName(newName);\n\t// \t\t}\n    // }; -->\n\n\t//works\n\tconst handleFirstNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newFirstName = e.currentTarget.value;\n\t\tif (!newFirstName || validateFirstName(newFirstName)) {\n\t\t\tsetFirstName(newFirstName);\n\t\t}\n\t};\n\n\t//works\n\tconst handleLastNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newLastName = e.currentTarget.value;\n\t\tif (!newLastName || validateLastName(newLastName)) {\n\t\t\tsetLastName(newLastName);\n\t\t}\n\t};\n\n\tconst handleUserNameChange = e => {\n\t\tsetUserName(e.currentTarget.value);\n\t  };\n\n\t\n    const handleEmailChange = e => {\n      setEmail(e.currentTarget.value);\n    };\n\n    const handlePasswordChange = e => {        \n      setPassword(e.currentTarget.value);\n    };\n\n    //firing when creating new account\n    const clearForm = () => {\n\t\t\tsetFirstName(\"\");\n\t\t\tsetLastName(\"\");\n\t\t\tsetUserName(\"\");\n\t\t\tsetEmail(\"\");\n\t\t\tsetPassword(\"\");\n\t\t\tsetSuccessfullAccountMessageVisible(false);\n    };\n\n\n    // ------------------------------------------------------\n\n    //from DEPOSIT COMPONENT\n\tlet [balance, setBalance] = useState(0.0);\n\tlet [depositAmount, setDepositAmount] = useState(0.0);\n    let [depositError, setDepositError] = useState(\"\");\n    let [depositArr, setDepositArr] = useState([]);\n\tconst [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false); \n\n\n    let depositErrorStr = \"\";\n\n    //validating numbers for deposit and withdraw\n    const validateNr = newValue => {\n\t\t\t//clear error when there's new input\n\t\t\tsetDepositError(\"\");\n\t\t\tsetWithdrawError(\"\");\n\n\t\t\tif(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n\t\t\t\t\tdepositErrorStr = \"Enter numbers only.\";\n\t\t\t\t\t//this was missing:\n\t\t\t\t\twithdrawErrorStr = \"Enter numbers only.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\t//this was missing:\n\t\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\t\treturn false; //didn't validate\n\t\t\t} \n\t\t\treturn true; //did validate\n    };\n\n    //input\n    const depositHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\t\tsetDepositAmount(newValue);\n\t\t\t} else {\n\t\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t}     \n\t\t\t\t// setSuccessMessageVisible(false);  \n\t\t\t\tsetDepositSuccessMessageVisible(false);\n    };\n\n    //submit + additional validation \n    const submitDeposit = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\t\tdepositErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\t\treturn;\n        }\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\tdepositErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//total amount / balance\n\t\t\tbalance += parseFloat(currentValue);\n\t\t\tsetBalance(balance);\n\t\t\tsetDepositSuccessMessageVisible(true);\n\t\t\tsetDepositAmount(0.0);\n\n\t\t\t//all new deposits for \"All Data\"\n\t\t\tlet newDeposit = {\n\t\t\t\t\"depositAmount\": depositAmount\n\t\t\t};\n\n\t\t\tsetDepositArr(depositArr => depositArr.concat(newDeposit));\n    };\n\n\t// clear successful deposit & withdraw message for OK button\n\tlet clearMsgDeposit = () => {\n\t\tsetDepositSuccessMessageVisible(false);\n\t\t// setDepositAmount(0.0); --> not doing it & probly not a good idea \n\t}\n\n    let showSuccessMessageDeposit = () => {\n\t\t\tif (depositSuccessMessageVisible) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t\t<p>Your deposit was received!</p>\n\t\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t\t<button type=\"submit\" id=\"clearDep\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgDeposit()}>Ok</button>             \n\t\t\t\t\t</div>\n\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n    // ------------------------------------------------------\n\n    //from WITHDRAW COMPONENT\n    let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n    let [withdrawError, setWithdrawError] = useState(\"\");\n    let [withdrawArr, setWithdrawArr] = useState([]);\n\tconst [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n\n    let withdrawErrorStr = \"\";\n\n    //input\n    const withdrawHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\tsetWithdrawAmount(newValue);\n\t\t\t} else {\n\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t} \n\t\t\tsetWithdrawSuccessMessageVisible(false);   \n    };\n\n    //submit + additional validation\n     const submitWithdrawal = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\twithdrawErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\twithdrawErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue > balance) {\n\t\t\t\twithdrawErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t} else {\n\t\t\t\tsetBalance(balance - parseFloat(currentValue));\n\t\t\t\tsetWithdrawError(\"\");\n\t\t\t\tsetWithdrawSuccessMessageVisible(true);\n\t\t\t\tsetWithdrawAmount(0.0);\n\t\t\t\t\n\t\t\t\t//all withdrawals, for \"All Data\"\n\t\t\t\tlet newWithdraw = {\n\t\t\t\t\t\"withdrawAmount\": withdrawAmount\n\t\t\t\t};\n\n\t\t\t\tsetWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n\t\t\t}\n  \t};\n\n\tlet clearMsgWithdraw = () => {\n\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t// setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n\t}\n    let showSuccessMessageWithdraw = () => {\n\t\t\tif (withdrawSuccessMessageVisible) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t\t<p>Your withdrawal was succesful.</p>\n\t\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t\t<button type=\"submit\" id=\"clearWith\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgWithdraw()}>Ok</button>             \n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n\n    const defaultContext = {\n\t\t\t//state:\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\tuserName,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tfirstNameError,\n\t\t\tlastNameError,\n\t\t\tuserNameError,\n\t\t\temailError,\n\t\t\tpasswError,\n\t\t\tdepositAmount,\n\t\t\tbalance,\n\t\t\tdepositError,\n\t\t\tsuccessfullAccountMessageVisible,\n\t\t\twithdrawSuccessMessageVisible,\n\t\t\tdepositSuccessMessageVisible,\n\t\t\twithdrawAmount,\n\t\t\twithdrawError,\n\t\t\tusers,\n\t\t\tdepositArr,\n\t\t\twithdrawArr,\n\t\t\t//functions:\n\t\t\tvalidate,\n\t\t\thandleClick,\n\t\t\thandleClickLogin,\n\t\t\thandleFirstNameChange,\n\t\t\thandleLastNameChange,\n\t\t\thandleUserNameChange,\n\t\t\thandleEmailChange,\n\t\t\thandlePasswordChange,\n\t\t\tclearForm,\n\t\t\tvalidateNr,\n\t\t\tdepositHandleChange,\n\t\t\tsubmitDeposit,\n\t\t\tshowSuccessMessageDeposit,\n\t\t\twithdrawHandleChange,\n\t\t\tsubmitWithdrawal,\n\t\t\tshowSuccessMessageWithdraw,\n\t\t\tshowSuccessMessageLogin\n    };\n\n    return (\n      <MyContext.Provider value={defaultContext}>\n        {children}\n      </MyContext.Provider>\n    )\n}\n\nexport {MyContext, MyContextProvider};\n"]},"metadata":{},"sourceType":"module"}