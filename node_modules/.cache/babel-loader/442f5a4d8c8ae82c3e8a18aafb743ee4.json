{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/badBank_ref2/src/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //from CREATE ACCOUNT COMPONENT\n  const [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [nameError, setNameError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  let firstNameErrorStr = \"\";\n  let lastNameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const validate = () => {\n    setEmailError(\"\");\n    setFirstNameError(\"\");\n    setLastNameError(\"\");\n    setPasswError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    } //firstName\n\n\n    if (!firstName) {\n      firstNameErrorStr = \"Oops! Your name can't be blank.\"; //additional: name length \n    } else if (firstName.length < 3) {\n      firstNameErrorStr = \"Name must be longer than that.\";\n    } //lastName\n\n\n    if (!lastName) {\n      lastNameErrorStr = \"Oops! Your name can't be blank.\"; //additional: name length \n    } else if (lastName.length < 3) {\n      lastNameErrorStr = \"Name must be longer than that.\";\n    }\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //validate if there's no error message \n    //firstName\n\n\n    if (firstNameErrorStr == \"\") {\n      validateName(firstName);\n    } //lastName\n\n\n    if (lastNameErrorStr == \"\") {\n      validateName(lastName);\n    }\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    }\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setFirstNameError(firstNameErrorStr);\n    setLastNameError(lastNameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return firstNameErrorStr && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  const validateName = newName => {\n    //additonal: limiting input to the letters of the English alphabet, including capital letters\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      nameErrorStr = \"Enter only letters\";\n      return false;\n    }\n\n    return true;\n  }; //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Invalid email.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      setSuccessfullAccountMessageVisible(true); //adding all new users, for \"All Data\"\n\n      let newUser = {\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"email\": email,\n        \"password\": password\n      };\n      setUsers(users => users.concat(newUser));\n    } else {\n      return;\n    }\n  }; //FORM INPUT  \n  // const handleNameChange = e => {\n  // \t\t// setName(e.currentTarget.value); //if there's no letter validation\n  // \t\tlet newName = e.currentTarget.value;\n  // \t\tif (!newName || validateName(newName)) {\n  // \t\t\t\tsetName(newName);\n  // \t\t}\n  // };\n\n\n  const handleFirstNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newFirstName = e.currentTarget.value;\n\n    if (!newFirstName || validateName(newFirstName)) {\n      setName(newFirstName);\n    }\n  };\n\n  const handleLastNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newLastName = e.currentTarget.value;\n\n    if (!newLastName || validateName(newLastName)) {\n      setName(newLastName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  }; //firing when creating new account\n\n\n  const clearForm = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessfullAccountMessageVisible(false);\n  }; // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [balance, setBalance] = useState(0.0);\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [depositError, setDepositError] = useState(\"\");\n  let [depositArr, setDepositArr] = useState([]);\n  const [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false);\n  let depositErrorStr = \"\"; //validating numbers for deposit and withdraw\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Enter numbers only.\";\n      setDepositError(depositErrorStr); //this was missing:\n\n      setWithdrawError(withdrawErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //input\n\n\n  const depositHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    } // setSuccessMessageVisible(false);  \n\n\n    setDepositSuccessMessageVisible(false);\n  }; //submit + additional validation \n\n\n  const submitDeposit = currentValue => {\n    if (currentValue == 0.0) {\n      depositErrorStr = \"Amount must be higher than 0.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      depositErrorStr = \"Amount must be lower than that.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return;\n    } //total amount / balance\n\n\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setDepositSuccessMessageVisible(true);\n    setDepositAmount(0.0); //all new deposits for \"All Data\"\n\n    let newDeposit = {\n      \"depositAmount\": depositAmount\n    };\n    setDepositArr(depositArr => depositArr.concat(newDeposit));\n  }; // clear successful deposit & withdraw message for OK button\n\n\n  let clearMsgDeposit = () => {\n    setDepositSuccessMessageVisible(false); // setDepositAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showHideSuccessMessageDeposit = () => {\n    if (depositSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearDep\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgDeposit(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 6\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  let [withdrawArr, setWithdrawArr] = useState([]);\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let withdrawErrorStr = \"\"; //input\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue == 0.0) {\n      withdrawErrorStr = \"Amount must be higher than 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      withdrawErrorStr = \"Amount must be lower than that.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n      setWithdrawAmount(0.0); //all withdrawals, for \"All Data\"\n\n      let newWithdraw = {\n        \"withdrawAmount\": withdrawAmount\n      };\n      setWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n    }\n  };\n\n  let clearMsgWithdraw = () => {\n    setWithdrawSuccessMessageVisible(false); // setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n  };\n\n  let showHideSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your withdrawal was succesful.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"clearWith\",\n          className: \"submitBtn btn btn-light\",\n          onClick: () => clearMsgWithdraw(),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    firstName,\n    lastName,\n    email,\n    password,\n    firstNameError,\n    lastNameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    successfullAccountMessageVisible,\n    withdrawSuccessMessageVisible,\n    depositSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    depositArr,\n    withdrawArr,\n    //functions:\n    validate,\n    handleClick,\n    handleFirstNameChange,\n    handleLastNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateNr,\n    depositHandleChange,\n    submitDeposit,\n    showHideSuccessMessageDeposit,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showHideSuccessMessageWithdraw\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MyContextProvider, \"spZrNQ6J0LkszFarGIiNPjK5qg4=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/badBank_ref2/src/MyContext.js"],"names":["React","createContext","useState","MyContext","MyContextProvider","children","successfullAccountMessageVisible","setSuccessfullAccountMessageVisible","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","users","setUsers","firstNameErrorStr","lastNameErrorStr","emailErrorStr","passwordErrorStr","validate","setFirstNameError","setLastNameError","length","validateName","validateEmail","validatePassword","newName","match","nameErrorStr","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","handleFirstNameChange","newFirstName","currentTarget","value","setName","handleLastNameChange","newLastName","handleEmailChange","handlePasswordChange","clearForm","balance","setBalance","depositAmount","setDepositAmount","depositError","setDepositError","depositArr","setDepositArr","depositSuccessMessageVisible","setDepositSuccessMessageVisible","depositErrorStr","validateNr","newValue","setWithdrawError","withdrawErrorStr","depositHandleChange","target","slice","submitDeposit","currentValue","parseFloat","newDeposit","clearMsgDeposit","showHideSuccessMessageDeposit","withdrawAmount","setWithdrawAmount","withdrawError","withdrawArr","setWithdrawArr","withdrawSuccessMessageVisible","setWithdrawSuccessMessageVisible","withdrawHandleChange","submitWithdrawal","newWithdraw","clearMsgWithdraw","showHideSuccessMessageWithdraw","defaultContext","firstNameError","lastNameError"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\n\nconst MyContext = createContext();\n\nfunction MyContextProvider({children}) {\n\n    //from CREATE ACCOUNT COMPONENT\n    const [successfullAccountMessageVisible, setSuccessfullAccountMessageVisible] = useState(false); \n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [nameError, setNameError] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwError, setPasswError] = useState(\"\");\n    const [users, setUsers] = useState([]);\n\n    let firstNameErrorStr = \"\";\n\tlet lastNameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwordErrorStr = \"\";\n\n\n    //NO INPUT + ADDITIONAL VALIDATION\n    const validate = () => {\n\t\t\tsetEmailError(\"\");\n\t\t\tsetFirstNameError(\"\");\n\t\t\tsetLastNameError(\"\");\n\t\t\tsetPasswError(\"\")\n\n\t\t\tif (!email) {\n\t\t\t\t\temailErrorStr = \"Oops! Your email can't be blank.\";\n\t\t\t\t\t//additional: email length \n\t\t\t} else if (email.length == 1) {\n\t\t\t\t\temailErrorStr = \"Email must be longer than that.\";\n\t\t\t}\n\n\t\t\t//firstName\n\t\t\tif (!firstName) {\n\t\t\t\t\tfirstNameErrorStr = \"Oops! Your name can't be blank.\";\n\t\t\t\t\t//additional: name length \n\t\t\t} else  if (firstName.length < 3) {\n\t\t\t\t\tfirstNameErrorStr = \"Name must be longer than that.\";\n\t\t\t} \n\n\t\t\t//lastName\n\t\t\tif (!lastName) {\n\t\t\t\tlastNameErrorStr = \"Oops! Your name can't be blank.\";\n\t\t\t\t//additional: name length \n\t\t\t} else  if (lastName.length < 3) {\n\t\t\t\tlastNameErrorStr = \"Name must be longer than that.\";\n\t\t\t} \n\t\t\t\n\t\t\tif (!password) {\n\t\t\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t\t}\n\n\t\t\t//validate if there's no error message \n\t\t\t//firstName\n\t\t\tif (firstNameErrorStr == \"\") {\n\t\t\t\t\tvalidateName(firstName);\n\t\t\t}\n\t\t\t//lastName\n\t\t\tif (lastNameErrorStr == \"\") {\n\t\t\t\tvalidateName(lastName);\n\t\t}\n\n\t\t\tif (emailErrorStr == \"\") {\n\t\t\t\t\tvalidateEmail(email);\n\t\t\t}\n\t\t\t\n\t\t\tif (passwordErrorStr == \"\") {\n\t\t\t\t\tvalidatePassword(password);\n\t\t\t}\n\n\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\tsetEmailError(emailErrorStr);\n\t\t\tsetPasswError(passwordErrorStr);\n\t\t\treturn firstNameErrorStr && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n    }; \n\n    const validateName = newName => {\n\t\t\t//additonal: limiting input to the letters of the English alphabet, including capital letters\n\t\t\t\t\tif(!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\t\t\tnameErrorStr = \"Enter only letters\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    //additional: email formatting\n    const validateEmail = newEmail => {\n\t\t\tlet emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n\t\t\tlet isValidFormat = str => {\n\t\t\t\t\treturn str.match(emailFormat);\n\t\t\t}\n\n\t\t\tif (!isValidFormat(newEmail)) {\n\t\t\t\t\temailErrorStr = \"Oops! Invalid email.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    const validatePassword = newPassword => {\n\t\t\tif (newPassword.length == 1 || newPassword.length < 8) {\n\t\t\t\t\tpasswordErrorStr = \"Password must be longer than that.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n\t\t\tif (validate()) { \n\t\t\t\t\tsetSuccessfullAccountMessageVisible(true); \n\t\t\t\t\t//adding all new users, for \"All Data\"\n\t\t\t\t\tlet newUser = {\n\t\t\t\t\t\t\t\"firstName\": firstName,\n\t\t\t\t\t\t\t\"lastName\": lastName,\n\t\t\t\t\t\t\t\"email\": email,\n\t\t\t\t\t\t\t\"password\": password\n\t\t\t\t\t};\n\t\t\t\t\tsetUsers(users => users.concat(newUser));\n\t\t\t} else {\n\t\t\treturn;\n\t\t\t}\n    };\n\n    //FORM INPUT  \n    // const handleNameChange = e => {\n\t// \t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t// \t\tlet newName = e.currentTarget.value;\n\t// \t\tif (!newName || validateName(newName)) {\n\t// \t\t\t\tsetName(newName);\n\t// \t\t}\n    // };\n\n\tconst handleFirstNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newFirstName = e.currentTarget.value;\n\t\tif (!newFirstName || validateName(newFirstName)) {\n\t\t\t\tsetName(newFirstName);\n\t\t}\n\t};\n\n\tconst handleLastNameChange = e => {\n\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\tlet newLastName = e.currentTarget.value;\n\t\tif (!newLastName || validateName(newLastName)) {\n\t\t\t\tsetName(newLastName);\n\t\t}\n\t};\n\n\t\n\n    const handleEmailChange = e => {\n      setEmail(e.currentTarget.value);\n    };\n\n    const handlePasswordChange = e => {        \n      setPassword(e.currentTarget.value);\n    };\n\n    //firing when creating new account\n    const clearForm = () => {\n\t\t\tsetFirstName(\"\");\n\t\t\tsetLastName(\"\");\n\t\t\tsetEmail(\"\");\n\t\t\tsetPassword(\"\");\n\t\t\tsetSuccessfullAccountMessageVisible(false);\n    };\n\n\n    // ------------------------------------------------------\n\n    //from DEPOSIT COMPONENT\n\tlet [balance, setBalance] = useState(0.0);\n\tlet [depositAmount, setDepositAmount] = useState(0.0);\n    let [depositError, setDepositError] = useState(\"\");\n    let [depositArr, setDepositArr] = useState([]);\n\tconst [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false); \n\n\n    let depositErrorStr = \"\";\n\n    //validating numbers for deposit and withdraw\n    const validateNr = newValue => {\n\t\t\t//clear error when there's new input\n\t\t\tsetDepositError(\"\");\n\t\t\tsetWithdrawError(\"\");\n\n\t\t\tif(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n\t\t\t\t\tdepositErrorStr = \"Enter numbers only.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\t//this was missing:\n\t\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\t\treturn false; //didn't validate\n\t\t\t} \n\t\t\treturn true; //did validate\n    };\n\n    //input\n    const depositHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\t\tsetDepositAmount(newValue);\n\t\t\t} else {\n\t\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t}     \n\t\t\t\t// setSuccessMessageVisible(false);  \n\t\t\t\tsetDepositSuccessMessageVisible(false);\n    };\n\n    //submit + additional validation \n    const submitDeposit = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\t\tdepositErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\t\treturn;\n        }\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\tdepositErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//total amount / balance\n\t\t\tbalance += parseFloat(currentValue);\n\t\t\tsetBalance(balance);\n\t\t\tsetDepositSuccessMessageVisible(true);\n\t\t\tsetDepositAmount(0.0);\n\n\t\t\t//all new deposits for \"All Data\"\n\t\t\tlet newDeposit = {\n\t\t\t\t\"depositAmount\": depositAmount\n\t\t\t};\n\n\t\t\tsetDepositArr(depositArr => depositArr.concat(newDeposit));\n    };\n\n\t// clear successful deposit & withdraw message for OK button\n\tlet clearMsgDeposit = () => {\n\t\tsetDepositSuccessMessageVisible(false);\n\t\t// setDepositAmount(0.0); --> not doing it & probly not a good idea \n\t}\n\n    let showHideSuccessMessageDeposit = () => {\n\t\t\tif (depositSuccessMessageVisible) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t\t<p>Your deposit was received!</p>\n\t\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t\t<button type=\"submit\" id=\"clearDep\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgDeposit()}>Ok</button>             \n\t\t\t\t\t</div>\n\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n    // ------------------------------------------------------\n\n    //from WITHDRAW COMPONENT\n    let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n    let [withdrawError, setWithdrawError] = useState(\"\");\n    let [withdrawArr, setWithdrawArr] = useState([]);\n\tconst [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n\n    let withdrawErrorStr = \"\";\n\n    //input\n    const withdrawHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\tsetWithdrawAmount(newValue);\n\t\t\t} else {\n\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t} \n\t\t\tsetWithdrawSuccessMessageVisible(false);   \n    };\n\n    //submit + additional validation\n     const submitWithdrawal = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\twithdrawErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\twithdrawErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue > balance) {\n\t\t\t\twithdrawErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t} else {\n\t\t\t\tsetBalance(balance - parseFloat(currentValue));\n\t\t\t\tsetWithdrawError(\"\");\n\t\t\t\tsetWithdrawSuccessMessageVisible(true);\n\t\t\t\tsetWithdrawAmount(0.0);\n\t\t\t\t\n\t\t\t\t//all withdrawals, for \"All Data\"\n\t\t\t\tlet newWithdraw = {\n\t\t\t\t\t\"withdrawAmount\": withdrawAmount\n\t\t\t\t};\n\n\t\t\t\tsetWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n\t\t\t}\n  \t};\n\n\tlet clearMsgWithdraw = () => {\n\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t// setWithdrawAmount(0.0); --> not doing it & probly not a good idea \n\t}\n    let showHideSuccessMessageWithdraw = () => {\n\t\t\tif (withdrawSuccessMessageVisible) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t\t\t<p>Your withdrawal was succesful.</p>\n\t\t\t\t\t\t\t{/* show OK button */}\n\t\t\t\t\t\t\t<button type=\"submit\" id=\"clearWith\" className=\"submitBtn btn btn-light\" onClick={() => clearMsgWithdraw()}>Ok</button>             \n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n\n    const defaultContext = {\n\t\t\t//state:\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tfirstNameError,\n\t\t\tlastNameError,\n\t\t\temailError,\n\t\t\tpasswError,\n\t\t\tdepositAmount,\n\t\t\tbalance,\n\t\t\tdepositError,\n\t\t\tsuccessfullAccountMessageVisible,\n\t\t\twithdrawSuccessMessageVisible,\n\t\t\tdepositSuccessMessageVisible,\n\t\t\twithdrawAmount,\n\t\t\twithdrawError,\n\t\t\tusers,\n\t\t\tdepositArr,\n\t\t\twithdrawArr,\n\t\t\t//functions:\n\t\t\tvalidate,\n\t\t\thandleClick,\n\t\t\thandleFirstNameChange,\n\t\t\thandleLastNameChange,\n\t\t\thandleEmailChange,\n\t\t\thandlePasswordChange,\n\t\t\tclearForm,\n\t\t\tvalidateNr,\n\t\t\tdepositHandleChange,\n\t\t\tsubmitDeposit,\n\t\t\tshowHideSuccessMessageDeposit,\n\t\t\twithdrawHandleChange,\n\t\t\tsubmitWithdrawal,\n\t\t\tshowHideSuccessMessageWithdraw\n    };\n\n    return (\n      <MyContext.Provider value={defaultContext}>\n        {children}\n      </MyContext.Provider>\n    )\n}\n\nexport {MyContext, MyContextProvider};\n"]},"metadata":{},"sourceType":"module"}