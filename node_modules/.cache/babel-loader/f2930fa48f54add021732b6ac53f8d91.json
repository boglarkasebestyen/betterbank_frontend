{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/myContext/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [firstNameError, setFirstNameError] = useState(\"\");\n  const [lastNameError, setLastNameError] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [userNameError, setUserNameError] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [destinationUser, setDestinationUser] = useState(\"\");\n  const [loggedInUserName, setLoggedInUserName] = useState(\"\");\n  const [showLoggedInMsg, setShowLoggedInMsg] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [balance, setBalance] = useState(0.0);\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [depositError, setDepositError] = useState(\"\");\n  const [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false);\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [withdrawError, setWithdrawError] = useState(\"\");\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [transferError, setTransferError] = useState(\"\");\n  const [transferSuccessMessageVisible, setTransferSuccessMessageVisible] = useState(false);\n  const [investAmount, setInvestAmount] = useState(\"\");\n  const [investError, setInvestError] = useState(\"\");\n  const [investSuccessMessageVisible, setInvestSuccessMessageVisible] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [dateTime, setDateTime] = useState(\"\");\n  let firstNameErrorStr = \"\";\n  let lastNameErrorStr = \"\";\n  let userNameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\";\n  let depositErrorStr = \"\";\n  let withdrawErrorStr = \"\";\n  let transferErrorStr = \"\";\n  let investErrorStr = \"\"; //INPUT VALIDATION WITH ERROR MESSAGES: NO INPUT + ADDITIONAL \n\n  const validate = () => {\n    setUserNameError(\"\");\n    setFirstNameError(\"\");\n    setLastNameError(\"\");\n    setEmailError(\"\");\n    setPasswError(\"\"); //username\n\n    if (!userName) {\n      userNameErrorStr = \"Oops! Your username can't be blank.\"; //additional: length \n    } else if (userName.length == 1) {\n      userNameErrorStr = \"Username must be longer than that.\";\n    } else if (userName.length > 10) {\n      userNameErrorStr = \"Username must not exceed 10 characters.\";\n    } //firstName\n\n\n    if (!firstName) {\n      firstNameErrorStr = \"Oops! Your first name can't be blank.\"; //additional: name length \n    } else if (firstName.length == 1) {\n      firstNameErrorStr = \"First name must be longer than that.\";\n    } //lastName\n\n\n    if (!lastName) {\n      lastNameErrorStr = \"Oops! Your last name can't be blank.\"; //additional: name length \n    } else if (lastName.length < 2) {\n      lastNameErrorStr = \"Last name must be longer than that.\";\n    } //email\n\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    } //password\n\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //if there's no error message, validate \n    //userName\n\n\n    if (userNameErrorStr == \"\") {\n      // alert(\"username\")\n      validateUserName(userName);\n    } //firstName\n\n\n    if (firstNameErrorStr == \"\") {\n      validateFirstName(firstName);\n    } //lastName\n\n\n    if (lastNameErrorStr == \"\") {\n      validateLastName(lastName);\n    } //email\n\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    } //password\n\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setUserNameError(userNameErrorStr);\n    setFirstNameError(firstNameErrorStr);\n    setLastNameError(lastNameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return userNameErrorStr === \"\" && firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  }; //----------------NAME AND USERNAME VALIDATION-----------------------\n\n\n  const validateFirstName = newFirstName => {\n    setFirstNameError(\"\"); //additonal: limiting input to the letters of the English alphabet, including capital letters\n\n    if (!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      //this ok?\n      firstNameErrorStr = \"Enter letters only\";\n      setFirstNameError(firstNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateLastName = newLastName => {\n    setLastNameError(\"\"); //additonal: limiting input to a mix of letters and numbers\n\n    if (!newLastName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      lastNameErrorStr = \"Enter letters only\";\n      setLastNameError(lastNameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateUserName = newUserName => {\n    setUserNameError(\"\"); //additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\n    if (!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n      userNameErrorStr = \"Only letters, numbers and underscore, and between 3-10 characters in username.\";\n      setUserNameError(userNameErrorStr);\n      return false;\n    }\n\n    return true;\n  }; //----------------EMAIL VALIDATION-----------------------\n  //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Bad email format.\";\n      return false;\n    }\n\n    return true;\n  }; //----------------PASSWORD VALIDATION-----------------------\n\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //----------------CREATE ACCOUNT FORM ONCHANGE-----------------------\n  //this is not used anywhere----------\n\n\n  const handleClick = e => {\n    if (validate()) {\n      //adding all new users, for \"All Data\"\n      let newUser = {\n        \"userName\": userName,\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"email\": email,\n        \"password\": password\n      };\n      setUsers(users => users.concat(newUser));\n      console.log(`these are all of the users: ${users}`);\n    } else {\n      return;\n    }\n  }; //---------------------------------\n  // form input onchange + setting state\n\n\n  const handleFirstNameChange = e => {\n    let newFirstName = e.currentTarget.value;\n\n    if (!newFirstName || validateFirstName(newFirstName)) {\n      setFirstName(newFirstName);\n    }\n  };\n\n  const handleLastNameChange = e => {\n    let newLastName = e.currentTarget.value;\n\n    if (!newLastName || validateLastName(newLastName)) {\n      setLastName(newLastName);\n    }\n  };\n\n  const handleUserNameChange = e => {\n    setUserName(e.currentTarget.value);\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const handleDestinationUserNameChange = e => {\n    setDestinationUser(e.currentTarget.value);\n  }; // Create Account success message\n\n\n  let showSuccessMessageAccount = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"successMessage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Awesome!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your account was created.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 4\n    }, this);\n  }; //----------------VALIDATION FOR DEPOSIT, WITHDRAW, TRANSFER, INVEST-----------------------\n\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n    setTransferError(\"\");\n    setInvestError(\"\");\n    setError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Enter numbers only.\";\n      withdrawErrorStr = \"Enter numbers only.\";\n      transferErrorStr = \"Enter numbers only.\";\n      investErrorStr = \"Enter numbers only.\";\n      setDepositError(depositErrorStr);\n      setWithdrawError(withdrawErrorStr);\n      setTransferError(transferErrorStr);\n      setInvestError(investErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //----------------DEPOSIT INPUT-----------------------\n\n\n  const depositHandleChange = e => {\n    e.preventDefault();\n    var newValue = e.target.value;\n\n    if (!validateNr(newValue)) {\n      newValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setDepositAmount(newValue);\n    setDepositSuccessMessageVisible(false);\n  }; //----------------DEPOSIT VALIDATION-----------------------\n\n\n  const validateDeposit = () => {\n    setDepositError(\"\");\n    setDepositSuccessMessageVisible(false);\n\n    if (depositAmount == 0.0) {\n      depositErrorStr = \"Amount must be higher than 0.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return false;\n    }\n\n    if (depositAmount.length >= 7) {\n      depositErrorStr = \"Amount must be lower than that.\";\n      setDepositError(depositErrorStr);\n      setDepositSuccessMessageVisible(false);\n      return false;\n    }\n\n    return true;\n  }; //----------------WITHDRAW INPUT-----------------------\n\n\n  const withdrawHandleChange = e => {\n    e.preventDefault();\n    var newValue = e.target.value;\n\n    if (!validateNr(newValue)) {\n      newValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawAmount(newValue);\n    setWithdrawSuccessMessageVisible(false);\n  }; //---------------WITHDRAW VALIDATION-------------------\n\n\n  const validateWithdraw = () => {\n    setWithdrawError(\"\");\n    setWithdrawSuccessMessageVisible(false);\n\n    if (withdrawAmount == 0.0) {\n      withdrawErrorStr = \"Amount must be higher than 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return false;\n    }\n\n    if (withdrawAmount.length >= 7) {\n      withdrawErrorStr = \"Amount must be lower than that.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return false;\n    }\n\n    if (withdrawAmount > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return false;\n    }\n\n    return true;\n  }; //---------------TRANSFER INPUT, VALIDATION-------------------\n\n\n  const validateTransfer = () => {\n    setTransferError(\"\");\n    setTransferSuccessMessageVisible(false);\n\n    if (transferAmount == 0.0) {\n      transferErrorStr = \"Amount must be higher than 0.\";\n      setTransferError(transferErrorStr);\n      setTransferSuccessMessageVisible(false);\n      return false;\n    }\n\n    if (transferAmount.length >= 7) {\n      transferErrorStr = \"Amount must be lower than that.\";\n      setTransferError(transferErrorStr);\n      setTransferSuccessMessageVisible(false);\n      return false;\n    }\n\n    if (transferAmount > balance) {\n      transferErrorStr = \"Amount higher than the account balance.\";\n      setTransferError(transferErrorStr);\n      setTransferSuccessMessageVisible(false);\n      return false;\n    }\n\n    return true;\n  }; //INPUT\n\n\n  const transferHandleChange = e => {\n    e.preventDefault();\n    var newValue = e.target.value;\n\n    if (!validateNr(newValue)) {\n      newValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setTransferAmount(newValue);\n    setTransferSuccessMessageVisible(false);\n  }; //---------------INVEST INPUT, VALIDATION-------------------\n\n\n  const validateInvest = () => {\n    setInvestError(\"\"); // setInvestSuccessMessageVisible(false);\n\n    if (investAmount == 0.0) {\n      investErrorStr = \"Amount must be higher than 0.\";\n      setInvestError(investErrorStr); // setInvestSuccessMessageVisible(false);\n\n      return false;\n    }\n\n    if (investAmount.length >= 7) {\n      investErrorStr = \"Amount must be lower than that.\";\n      setInvestError(investErrorStr); // setInvestSuccessMessageVisible(false);\n\n      return false;\n    }\n\n    if (transferAmount > balance) {\n      transferErrorStr = \"Amount higher than the account balance.\";\n      setInvestError(investErrorStr); // setInvestSuccessMessageVisible(false);\n\n      return false;\n    }\n\n    return true;\n  }; //INPUT\n\n\n  const investHandleChange = e => {\n    e.preventDefault();\n    var newValue = e.target.value;\n\n    if (!validateNr(newValue)) {\n      newValue = newValue.slice(0, -1);\n    }\n\n    setInvestAmount(newValue); // setInvestSuccessMessageVisible(false);\n  }; //----------------CLEAR FORMS-----------------------\n\n\n  const clearForm = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setUserName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n  }; //---------------DETECTING PAGE RELOAD AND BROWSER TAB CLOSE / PREVENTING BEFOREUNLOAD EVENT-------------------\n\n  /*\n  https://dev.to/eons/detect-page-refresh-tab-close-and-route-change-with-react-router-v5-3pd\n  */\n\n\n  window.onbeforeunload = event => {\n    const e = event || window.event; // Cancel the event\n\n    e.preventDefault();\n\n    if (e) {\n      console.log(loggedInUserName);\n      e.returnValue = ''; // Legacy method for cross browser support\n    }\n\n    return ''; // Legacy method for cross browser support\n  }; //---------------AUTHENTICATION-------------------\n\n\n  async function authenticateWithAPI() {\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n    const response = await fetch(`${API_URL}/auth/local`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        identifier: \"sebestyenboglarkacsilla@gmail.com\",\n        password: \"SecretPassword666\"\n      })\n    });\n\n    if (response.ok) {\n      const responseObj = await response.json();\n      Cookies.set(\"token\", responseObj.jwt);\n    } else {\n      console.log(response.statusText);\n      setError(response.statusText);\n    }\n  } //------------GET BALANCE FROM DATABASE------------------\n\n\n  async function getBalance() {\n    let userToken = Cookies.get(\"token\");\n\n    if (!userToken) {\n      authenticateWithAPI();\n      userToken = Cookies.get(\"token\");\n    }\n\n    let username = Cookies.get(\"username\");\n    ;\n\n    if (!username) {\n      setError(\"Not logged in!\");\n    }\n\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n    const balanceResponse = await fetch(`${API_URL}/transactions/balance`, {\n      method: \"POST\",\n      headers: userToken && {\n        Authorization: `Bearer ${userToken}`\n      },\n      body: JSON.stringify({\n        \"username\": username\n      })\n    });\n\n    if (!balanceResponse.ok) {\n      console.log(balanceResponse.statusText);\n      setError(balanceResponse.statusText);\n    } else {\n      const balanceResponseObj = await balanceResponse.json();\n      const balanceError = balanceResponseObj.error;\n\n      if (!balanceError) {\n        setBalance(balanceResponseObj.balance);\n      }\n    }\n\n    return balance;\n  }\n\n  ; //------------EXPORT CONTEXT------------------\n\n  const defaultContext = {\n    //state:\n    firstName,\n    lastName,\n    userName,\n    email,\n    password,\n    firstNameError,\n    lastNameError,\n    userNameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    withdrawSuccessMessageVisible,\n    depositSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    error,\n    result,\n    loggedInUserName,\n    showLoggedInMsg,\n    dateTime,\n    transferAmount,\n    transferError,\n    transferSuccessMessageVisible,\n    destinationUser,\n    investAmount,\n    investError,\n    investSuccessMessageVisible,\n    //functions:\n    validate,\n    handleClick,\n    handleFirstNameChange,\n    handleLastNameChange,\n    handleUserNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    validateNr,\n    depositHandleChange,\n    validateDeposit,\n    withdrawHandleChange,\n    setDepositSuccessMessageVisible,\n    showSuccessMessageAccount,\n    clearForm,\n    authenticateWithAPI,\n    setError,\n    setResult,\n    setLoggedInUserName,\n    setShowLoggedInMsg,\n    setDateTime,\n    setBalance,\n    setDepositAmount,\n    validateWithdraw,\n    setWithdrawAmount,\n    setWithdrawSuccessMessageVisible,\n    getBalance,\n    validateTransfer,\n    validateInvest,\n    investHandleChange,\n    transferHandleChange,\n    setInvestSuccessMessageVisible,\n    setInvestAmount,\n    setTransferSuccessMessageVisible,\n    setTransferAmount,\n    setDestinationUser,\n    handleDestinationUserNameChange\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 619,\n    columnNumber: 4\n  }, this);\n}\n\n_s(MyContextProvider, \"TxIVANcXfQO+Cx4dRCMrp1O1LBE=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/3rd semester/badbank_backend_test/betterbank_frontend/src/myContext/MyContext.js"],"names":["React","createContext","useState","Cookies","MyContext","MyContextProvider","children","firstName","setFirstName","lastName","setLastName","firstNameError","setFirstNameError","lastNameError","setLastNameError","userName","setUserName","userNameError","setUserNameError","users","setUsers","destinationUser","setDestinationUser","loggedInUserName","setLoggedInUserName","showLoggedInMsg","setShowLoggedInMsg","email","setEmail","emailError","setEmailError","password","setPassword","passwError","setPasswError","balance","setBalance","depositAmount","setDepositAmount","depositError","setDepositError","depositSuccessMessageVisible","setDepositSuccessMessageVisible","withdrawAmount","setWithdrawAmount","withdrawError","setWithdrawError","withdrawSuccessMessageVisible","setWithdrawSuccessMessageVisible","transferAmount","setTransferAmount","transferError","setTransferError","transferSuccessMessageVisible","setTransferSuccessMessageVisible","investAmount","setInvestAmount","investError","setInvestError","investSuccessMessageVisible","setInvestSuccessMessageVisible","error","setError","result","setResult","dateTime","setDateTime","firstNameErrorStr","lastNameErrorStr","userNameErrorStr","emailErrorStr","passwordErrorStr","depositErrorStr","withdrawErrorStr","transferErrorStr","investErrorStr","validate","length","validateUserName","validateFirstName","validateLastName","validateEmail","validatePassword","newFirstName","match","newLastName","newUserName","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","console","log","handleFirstNameChange","currentTarget","value","handleLastNameChange","handleUserNameChange","handleEmailChange","handlePasswordChange","handleDestinationUserNameChange","showSuccessMessageAccount","validateNr","newValue","depositHandleChange","preventDefault","target","slice","validateDeposit","withdrawHandleChange","validateWithdraw","validateTransfer","transferHandleChange","validateInvest","investHandleChange","clearForm","window","onbeforeunload","event","returnValue","authenticateWithAPI","API_URL","process","env","NEXT_PUBLIC_API_URL","response","fetch","method","headers","body","JSON","stringify","identifier","ok","responseObj","json","set","jwt","statusText","getBalance","userToken","get","username","balanceResponse","Authorization","balanceResponseObj","balanceError","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\nimport Cookies from \"js-cookie\";\n\nconst MyContext = createContext();\n\n\nfunction MyContextProvider({children}) {\n\n\tconst [firstName, setFirstName] = useState(\"\");\n\tconst [lastName, setLastName] = useState(\"\");\n\tconst [firstNameError, setFirstNameError] = useState(\"\");\n\tconst [lastNameError, setLastNameError] = useState(\"\");\n\n\tconst [userName, setUserName] = useState(\"\");\n\tconst [userNameError, setUserNameError] = useState(\"\");\n\tconst [users, setUsers] = useState([]);\n\tconst [destinationUser, setDestinationUser] = useState(\"\");\n\n\tconst [loggedInUserName, setLoggedInUserName] = useState(\"\")\n\tconst [showLoggedInMsg, setShowLoggedInMsg] = useState(false);\n\n\t\n\tconst [email, setEmail] = useState(\"\");\n\tconst [emailError, setEmailError] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\tconst [passwError, setPasswError] = useState(\"\");\n\n\n\tconst [balance, setBalance] = useState(0.0);\n\tconst [depositAmount, setDepositAmount] = useState(\"\");\n\tconst [depositError, setDepositError] = useState(\"\");\n\tconst [depositSuccessMessageVisible, setDepositSuccessMessageVisible] = useState(false); \n\n\tconst [withdrawAmount, setWithdrawAmount] = useState(\"\");\n\tconst [withdrawError, setWithdrawError] = useState(\"\");\n\tconst [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n\n\tconst [transferAmount, setTransferAmount] = useState(\"\");\n\tconst [transferError, setTransferError] = useState(\"\");\n\tconst [transferSuccessMessageVisible, setTransferSuccessMessageVisible] = useState(false);\n\n\tconst [investAmount, setInvestAmount] = useState(\"\");\n\tconst [investError, setInvestError] = useState(\"\");\n\tconst [investSuccessMessageVisible, setInvestSuccessMessageVisible] = useState(false);\n\n\tconst [error, setError] = useState(\"\");\n\tconst [result, setResult] = useState(\"\");\n\tconst [dateTime, setDateTime] = useState(\"\");\n\n\n\tlet firstNameErrorStr = \"\";\n\tlet lastNameErrorStr = \"\";\n\tlet userNameErrorStr = \"\";\n\tlet emailErrorStr = \"\";\n\tlet passwordErrorStr = \"\";\n\tlet depositErrorStr = \"\";\n\tlet withdrawErrorStr = \"\";\n\tlet transferErrorStr = \"\";\n\tlet investErrorStr = \"\";\n\n\n\t//INPUT VALIDATION WITH ERROR MESSAGES: NO INPUT + ADDITIONAL \n\tconst validate = () => {\n\t\tsetUserNameError(\"\");\n\t\tsetFirstNameError(\"\");\n\t\tsetLastNameError(\"\");\n\t\tsetEmailError(\"\");\n\t\tsetPasswError(\"\");\n\n\t\t//username\n\t\tif (!userName) {\n\t\t\tuserNameErrorStr = \"Oops! Your username can't be blank.\";\n\t\t\t//additional: length \n\t\t} else  if (userName.length == 1) {\n\t\t\tuserNameErrorStr = \"Username must be longer than that.\";\n\t\t} else if (userName.length > 10) {\n\t\t\tuserNameErrorStr = \"Username must not exceed 10 characters.\";\n\t\t}\n\n\t\t//firstName\n\t\tif (!firstName) {\n\t\t\tfirstNameErrorStr = \"Oops! Your first name can't be blank.\";\n\t\t\t//additional: name length \n\t\t} else  if (firstName.length == 1) {\n\t\t\t\tfirstNameErrorStr = \"First name must be longer than that.\";\n\t\t} \n\n\t\t//lastName\n\t\tif (!lastName) {\n\t\t\tlastNameErrorStr = \"Oops! Your last name can't be blank.\";\n\t\t\t//additional: name length \n\t\t} else  if (lastName.length < 2) {\n\t\t\tlastNameErrorStr = \"Last name must be longer than that.\";\n\t\t} \n\n\t\t//email\n\t\tif (!email) {\n\t\t\t\temailErrorStr = \"Oops! Your email can't be blank.\";\n\t\t\t\t//additional: email length \n\t\t} else if (email.length == 1) {\n\t\t\t\temailErrorStr = \"Email must be longer than that.\";\n\t\t}\n\n\t\t//password\n\t\tif (!password) {\n\t\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t}\n\n\t\t//if there's no error message, validate \n\t\t//userName\n\t\tif (userNameErrorStr == \"\") {\n\t\t\t// alert(\"username\")\n\t\t\tvalidateUserName(userName);\n\t\t}\n\t\t//firstName\n\t\tif (firstNameErrorStr == \"\") {\n\t\t\t\tvalidateFirstName(firstName);\n\t\t}\n\n\t\t//lastName\n\t\tif (lastNameErrorStr == \"\") {\n\t\t\tvalidateLastName(lastName);\n\t\t}\n\n\t\t//email\n\t\tif (emailErrorStr == \"\") {\n\t\t\tvalidateEmail(email);\n\t\t}\n\t\t\n\t\t//password\n\t\tif (passwordErrorStr == \"\") {\n\t\t\t\tvalidatePassword(password);\n\t\t}\n\n\t\tsetUserNameError(userNameErrorStr);\n\t\tsetFirstNameError(firstNameErrorStr);\n\t\tsetLastNameError(lastNameErrorStr);\n\t\tsetEmailError(emailErrorStr);\n\t\tsetPasswError(passwordErrorStr);\n\t\treturn userNameErrorStr === \"\" && firstNameErrorStr === \"\" && lastNameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n\t}; \n\n\t//----------------NAME AND USERNAME VALIDATION-----------------------\n\n\tconst validateFirstName = newFirstName => {\n\tsetFirstNameError(\"\");\n\t//additonal: limiting input to the letters of the English alphabet, including capital letters\n\t\tif(!newFirstName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t//this ok?\n\t\t\tfirstNameErrorStr = \"Enter letters only\";\n\t\t\tsetFirstNameError(firstNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\tconst validateLastName = newLastName => {\n\t\tsetLastNameError(\"\");\n\t\t//additonal: limiting input to a mix of letters and numbers\n\t\tif(!newLastName.match( /^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\tlastNameErrorStr = \"Enter letters only\";\n\t\t\tsetLastNameError(lastNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\tconst validateUserName = newUserName => {\n\t\tsetUserNameError(\"\");\n\t\t//additonal: limiting input to only Alphabets, Numbers and Underscore and between 3 to 10 characters\n\t\tif(!newUserName.match(/^[a-zA-Z0-9_]{4,10}$/)) {\n\t\t\tuserNameErrorStr = \"Only letters, numbers and underscore, and between 3-10 characters in username.\";\n\t\t\tsetUserNameError(userNameErrorStr);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\n\n\t//----------------EMAIL VALIDATION-----------------------\n\t\t//additional: email formatting\n\t\tconst validateEmail = newEmail => {\n\t\t\tlet emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n\t\t\tlet isValidFormat = str => {\n\t\t\t\treturn str.match(emailFormat);\n\t\t\t}\n\n\t\t\tif (!isValidFormat(newEmail)) {\n\t\t\t\temailErrorStr = \"Oops! Bad email format.\";\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//----------------PASSWORD VALIDATION-----------------------\n\n\t\tconst validatePassword = newPassword => {\n\t\t\tif (newPassword.length == 1 || newPassword.length < 8) {\n\t\t\t\tpasswordErrorStr = \"Password must be longer than that.\";\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\n\t\t//----------------CREATE ACCOUNT FORM ONCHANGE-----------------------\n\n\n\t\t//this is not used anywhere----------\n\t\tconst handleClick = e => {\n\t\t\tif (validate()) { \n\t\t\t\t//adding all new users, for \"All Data\"\n\t\t\t\tlet newUser = {\n\t\t\t\t\t\t\"userName\": userName,\n\t\t\t\t\t\t\"firstName\": firstName,\n\t\t\t\t\t\t\"lastName\": lastName,\n\t\t\t\t\t\t\"email\": email,\n\t\t\t\t\t\t\"password\": password\n\t\t\t\t};\n\t\t\t\tsetUsers(users => users.concat(newUser));\n\t\t\t\tconsole.log(`these are all of the users: ${users}`)\n\t\t\t} else {\n\t\t\treturn;\n\t\t\t}\n\t\t};\n\t\t//---------------------------------\n\n\n\n// form input onchange + setting state\n\tconst handleFirstNameChange = e => {\n\t\tlet newFirstName = e.currentTarget.value;\n\t\tif (!newFirstName || validateFirstName(newFirstName)) {\n\t\t\tsetFirstName(newFirstName);\n\t\t}\n\t};\n\n\tconst handleLastNameChange = e => {\n\t\tlet newLastName = e.currentTarget.value;\n\t\tif (!newLastName || validateLastName(newLastName)) {\n\t\t\tsetLastName(newLastName);\n\t\t}\n\t};\n\n\tconst handleUserNameChange = e => {\n\t\tsetUserName(e.currentTarget.value);\n\t\t};\n\n\n\t\tconst handleEmailChange = e => {\n\t\t\tsetEmail(e.currentTarget.value);\n\t\t};\n\n\t\tconst handlePasswordChange = e => {        \n\t\t\tsetPassword(e.currentTarget.value);\n\t\t};\n\n\t\tconst handleDestinationUserNameChange = e => {\n\t\t\tsetDestinationUser(e.currentTarget.value);\n\t\t};\n\n\t// Create Account success message\n\tlet showSuccessMessageAccount = () => {\n\t\treturn (\n\t\t\t<div className=\"successMessage\">\n\t\t\t\t\t<h5>Awesome!</h5>\n\t\t\t\t\t<p>Your account was created.</p>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t\n\n\t\t//----------------VALIDATION FOR DEPOSIT, WITHDRAW, TRANSFER, INVEST-----------------------\n\n\t\tconst validateNr = (newValue) => {\n\t\t\t//clear error when there's new input\n\t\t\tsetDepositError(\"\");\n\t\t\tsetWithdrawError(\"\");\n\t\t\tsetTransferError(\"\");\n\t\t\tsetInvestError(\"\");\n\t\t\tsetError(\"\");\n\t\t\tif(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n\t\t\t\tdepositErrorStr = \"Enter numbers only.\";\n\t\t\t\twithdrawErrorStr = \"Enter numbers only.\";\n\t\t\t\ttransferErrorStr = \"Enter numbers only.\";\n\t\t\t\tinvestErrorStr = \"Enter numbers only.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetTransferError(transferErrorStr);\n\t\t\t\tsetInvestError(investErrorStr);\n\t\t\t\treturn false; //didn't validate\n\t\t\t} \n\t\t\treturn true; //did validate\n\t\t};\n\n\t\t//----------------DEPOSIT INPUT-----------------------\n\t\tconst depositHandleChange = e => {\n\t\t\te.preventDefault();\n\t\t\tvar newValue = e.target.value;\n\t\t\tif (!validateNr(newValue)) { \n\t\t\t \tnewValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t}\n\t\t\tsetDepositAmount(newValue);\n\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t};\n\n\t\t//----------------DEPOSIT VALIDATION-----------------------\n\t\tconst validateDeposit = () => {\n\t\t\tsetDepositError(\"\");\n\t\t\tsetDepositSuccessMessageVisible(false);\n\n\t\t\tif (depositAmount == 0.0) {\n\t\t\t\tdepositErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn false;\n\t\t\t} \n\n\t\t\tif (depositAmount.length >= 7) {\n\t\t\t\tdepositErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetDepositSuccessMessageVisible(false);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//----------------WITHDRAW INPUT-----------------------\n\t\tconst withdrawHandleChange = e => {\n\t\t\te.preventDefault();\n\t\t\tvar newValue = e.target.value;\n\t\t\tif (!validateNr(newValue)) { \n\t\t\t\tnewValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t} \n\t\t\tsetWithdrawAmount(newValue)\n\t\t\tsetWithdrawSuccessMessageVisible(false);   \n\t\t};\n\n\t\t//---------------WITHDRAW VALIDATION-------------------\n\t\tconst validateWithdraw = () => {\n\t\t\t\tsetWithdrawError(\"\");\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\n\t\t\t\tif (withdrawAmount == 0.0) {\n\t\t\t\t\twithdrawErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (withdrawAmount.length >= 7) {\n\t\t\t\t\twithdrawErrorStr = \"Amount must be lower than that.\";\n\t\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tif (withdrawAmount > balance) {\n\t\t\t\t\twithdrawErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t} \n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\t\n\t\t\t//---------------TRANSFER INPUT, VALIDATION-------------------\n\t\t\tconst validateTransfer = () => {\n\t\t\t\tsetTransferError(\"\");\n\t\t\t\tsetTransferSuccessMessageVisible(false);\n\n\t\t\t\tif (transferAmount == 0.0) {\n\t\t\t\t\ttransferErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\tsetTransferError(transferErrorStr);\n\t\t\t\t\tsetTransferSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (transferAmount.length >= 7) {\n\t\t\t\t\ttransferErrorStr = \"Amount must be lower than that.\";\n\t\t\t\t\tsetTransferError(transferErrorStr);\n\t\t\t\t\tsetTransferSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tif (transferAmount > balance) {\n\t\t\t\t\ttransferErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\t\tsetTransferError(transferErrorStr);\n\t\t\t\t\tsetTransferSuccessMessageVisible(false);\n\t\t\t\t\treturn false;\n\t\t\t\t} \n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\t//INPUT\n\t\t\tconst transferHandleChange = e => {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar newValue = e.target.value;\n\t\t\t\tif (!validateNr(newValue)) { \n\t\t\t\t\t newValue = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t\t}\n\t\t\t\tsetTransferAmount(newValue);\n\t\t\t\tsetTransferSuccessMessageVisible(false);\n\t\t\t};\n\n\n\t\t\t //---------------INVEST INPUT, VALIDATION-------------------\n\n\t\t\t const validateInvest = () => {\n\t\t\t\t\tsetInvestError(\"\");\n\t\t\t\t\t// setInvestSuccessMessageVisible(false);\n\n\t\t\t\t\tif (investAmount == 0.0) {\n\t\t\t\t\t\tinvestErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\t\tsetInvestError(investErrorStr);\n\t\t\t\t\t\t// setInvestSuccessMessageVisible(false);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (investAmount.length >= 7) {\n\t\t\t\t\t\tinvestErrorStr = \"Amount must be lower than that.\";\n\t\t\t\t\t\tsetInvestError(investErrorStr);\n\t\t\t\t\t\t// setInvestSuccessMessageVisible(false);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif (transferAmount > balance) {\n\t\t\t\t\t\ttransferErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\t\t\tsetInvestError(investErrorStr);\n\t\t\t\t\t\t// setInvestSuccessMessageVisible(false);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} \n\t\t\t\t\treturn true;\n\t\t\t\t};\n\n\t\t\t//INPUT\n\t\t\tconst investHandleChange = e => {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar newValue = e.target.value;\n\t\t\t\tif (!validateNr(newValue)) { \n\t\t\t\t\t newValue = newValue.slice(0, -1); \n\t\t\t\t}\n\t\t\t\tsetInvestAmount(newValue);\n\t\t\t\t// setInvestSuccessMessageVisible(false);\n\t\t\t};\n\n\n\t\t\t//----------------CLEAR FORMS-----------------------\n\n\t\tconst clearForm = () => {\n\t\t\tsetFirstName(\"\");\n\t\t\tsetLastName(\"\");\n\t\t\tsetUserName(\"\");\n\t\t\tsetEmail(\"\");\n\t\t\tsetPassword(\"\");\n\t\t};\n\n\n\n\n\t\t//---------------DETECTING PAGE RELOAD AND BROWSER TAB CLOSE / PREVENTING BEFOREUNLOAD EVENT-------------------\n\t\t/*\n\t\thttps://dev.to/eons/detect-page-refresh-tab-close-and-route-change-with-react-router-v5-3pd\n\t\t*/\n\n\t\twindow.onbeforeunload = (event) => {\n\t\t\tconst e = event || window.event;\n\t\t\t// Cancel the event\n\t\t\te.preventDefault();\n\t\t\tif (e) {\n\t\t\t\tconsole.log(loggedInUserName)\n\t\t\t\te.returnValue = ''; // Legacy method for cross browser support\n\t\t\t}\n\t\t\treturn ''; // Legacy method for cross browser support\n\t\t};\n\n\t\n\t\t//---------------AUTHENTICATION-------------------\n\t\tasync function authenticateWithAPI() {\n\n\t\t\tconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\t\t\tconst response = await fetch(`${API_URL}/auth/local`, {\n\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Accept\": \"application/json\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tidentifier: \"sebestyenboglarkacsilla@gmail.com\",\n\t\t\t\t\t\t\tpassword: \"SecretPassword666\"\n\t\t\t\t\t})\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\t\tconst responseObj = await response.json();\n\t\t\t\t\tCookies.set(\"token\", responseObj.jwt);\n\t\t\t} else {\n\t\t\t\t\tconsole.log(response.statusText)\n\t\t\t\t\tsetError(response.statusText);\n\t\t\t}\n\t\t}\n\n\n\n\t\t//------------GET BALANCE FROM DATABASE------------------\n\t\tasync function getBalance() {\n\t\t\tlet userToken = Cookies.get(\"token\");\n\t\t\tif (!userToken) {\n\t\t\t\tauthenticateWithAPI();\n\t\t\t\tuserToken = Cookies.get(\"token\");\n\t\t\t}\n\t\n\t\t\tlet username = Cookies.get(\"username\");;\n\t\t\tif (!username) {\n\t\t\t\tsetError(\"Not logged in!\");\n\t\t\t}\n\n\t\t\tconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\t\t\tconst balanceResponse = await fetch(`${API_URL}/transactions/balance`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: userToken && { Authorization: `Bearer ${userToken}` },\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\"username\" : username\n\t\t\t\t})\n\t\t\t});\n\t\n\t\t\tif (!balanceResponse.ok) {\n\t\t\t\tconsole.log(balanceResponse.statusText)\n\t\t\t\tsetError(balanceResponse.statusText);\n\t\t\t} else {\n\t\t\t\tconst balanceResponseObj = await balanceResponse.json();\n\t\t\t\tconst balanceError = balanceResponseObj.error;\n\t\t\t\tif (!balanceError) {\n\t\t\t\t\tsetBalance(balanceResponseObj.balance);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn balance;\n\t\t};\n\n\n\n\n\t\t//------------EXPORT CONTEXT------------------\n\t\tconst defaultContext = {\n\t\t\t//state:\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\tuserName,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tfirstNameError,\n\t\t\tlastNameError,\n\t\t\tuserNameError,\n\t\t\temailError,\n\t\t\tpasswError,\n\t\t\tdepositAmount,\n\t\t\tbalance,\n\t\t\tdepositError,\n\t\t\twithdrawSuccessMessageVisible,\n\t\t\tdepositSuccessMessageVisible,\n\t\t\twithdrawAmount,\n\t\t\twithdrawError,\n\t\t\tusers,\n\t\t\terror,\n\t\t\tresult,\n\t\t\tloggedInUserName,\n\t\t\tshowLoggedInMsg,\n\t\t\tdateTime,\n\t\t\ttransferAmount,\n\t\t\ttransferError,\n\t\t\ttransferSuccessMessageVisible,\n\t\t\tdestinationUser,\n\t\t\tinvestAmount,\n\t\t\tinvestError,\n\t\t\tinvestSuccessMessageVisible,\n\t\t\t//functions:\n\t\t\tvalidate,\n\t\t\thandleClick,\n\t\t\thandleFirstNameChange,\n\t\t\thandleLastNameChange,\n\t\t\thandleUserNameChange,\n\t\t\thandleEmailChange,\n\t\t\thandlePasswordChange,\n\t\t\tvalidateNr,\n\t\t\tdepositHandleChange,\n\t\t\tvalidateDeposit,\n\t\t\twithdrawHandleChange,\n\t\t\tsetDepositSuccessMessageVisible,\n\t\t\tshowSuccessMessageAccount,\n\t\t\tclearForm,\n\t\t\tauthenticateWithAPI,\n\t\t\tsetError,\t\t\t\n\t\t\tsetResult,\n\t\t\tsetLoggedInUserName,\n\t\t\tsetShowLoggedInMsg,\n\t\t\tsetDateTime,\n\t\t\tsetBalance,\n\t\t\tsetDepositAmount,\n\t\t\tvalidateWithdraw,\n\t\t\tsetWithdrawAmount,\n\t\t\tsetWithdrawSuccessMessageVisible,\n\t\t\tgetBalance,\n\t\t\tvalidateTransfer,\n\t\t\tvalidateInvest,\n\t\t\tinvestHandleChange,\n\t\t\ttransferHandleChange,\n\t\t\tsetInvestSuccessMessageVisible,\n\t\t\tsetInvestAmount,\n\t\t\tsetTransferSuccessMessageVisible,\n\t\t\tsetTransferAmount,\n\t\t\tsetDestinationUser,\n\t\t\thandleDestinationUserNameChange,\n\t\t};\n\n\t\treturn (\n\t\t\t<MyContext.Provider value={defaultContext}>\n\t\t\t\t{children}\n\t\t\t</MyContext.Provider>\n\t\t)\n}\n\nexport {MyContext, MyContextProvider};\n"]},"metadata":{},"sourceType":"module"}